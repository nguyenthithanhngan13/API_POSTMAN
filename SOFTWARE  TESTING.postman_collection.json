{
	"info": {
		"_postman_id": "83039682-8791-4b82-aab5-16bc51db636c",
		"name": "SOFTWARE  TESTING",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33859515"
	},
	"item": [
		{
			"name": "OnlineShop_Testing",
			"item": [
				{
					"name": "Categories",
					"item": [
						{
							"name": "GET",
							"item": [
								{
									"name": "TC_Categories_GET BY ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 200ms\", function() {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"pm.test('Response must be valid and have a body', function() \r",
													"    {\r",
													"        pm.response.to.be.withBody;\r",
													"        pm.response.to.be.json;\r",
													"    });\r",
													"\r",
													"pm.test(\"json must be an object\",() => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      id: { type: 'integer'},\r",
													"      name: { type: 'string'},\r",
													"      description: { type: ['string', 'null']},\r",
													"    },\r",
													"    additionalProperties: false,\r",
													"    required: ['id', 'name', 'description'],\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Url}}/categories/5",
											"host": [
												"{{Url}}"
											],
											"path": [
												"categories",
												"5"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Categories_GET ALL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function() {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 200ms\", function(){\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"pm.test(\"Response must be valid and have a body\", function(){\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"pm.test(\"Json must be an array\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.an('array');\r",
													"});\r",
													"pm.test(\"Schema is valid\", () => {\r",
													"    var schema = {\r",
													"        type: 'array',\r",
													"        items: {\r",
													"            type: 'object',\r",
													"            properties: {\r",
													"                id: { type: 'number'},\r",
													"                name: {type: 'string'},\r",
													"                description: {type: ['string','null']},\r",
													"            },\r",
													"            required: ['id','name','description'],\r",
													"            additionalProperties: false\r",
													"        },\r",
													"    };\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Url}}/categories",
											"host": [
												"{{Url}}"
											],
											"path": [
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Categories_GET BY ID Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function() {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 200ms\", function(){\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a body\", function(){\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"Json must be an object\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', () => {\r",
													"    var schema = {\r",
													"        type: 'object',\r",
													"        properties: {\r",
													"            statusCode: { type: 'number'},\r",
													"            message: {type: 'array', items: {type: 'string'}},\r",
													"            error: { type: 'string' },\r",
													"        },\r",
													"        required: ['statusCode','error','message'],\r",
													"        additionalProperties: false,\r",
													"    };\r",
													"    const  responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"pm.test('values is correct',function() {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.statusCode).to.eql(400);\r",
													"    pm.expect(jsonData.message).to.include('Validation failed (numeric string is expected)');\r",
													"    pm.expect(jsonData.error).to.eql('Invalid route params')\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Url}}/categories/1abc",
											"host": [
												"{{Url}}"
											],
											"path": [
												"categories",
												"1abc"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Categories_GET BY ID not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 410\", function() {\r",
													"    pm.response.to.have.status(410);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 200ms\", function(){\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a body\", function() {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Json must be an object\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test(\"Schema is valid\", () => {\r",
													"    var schema = {\r",
													"        type: 'object',\r",
													"        properties: {\r",
													"            statusCode: {type: 'number'},\r",
													"            message: {type: 'array', item :{type: 'string'}},\r",
													"            error: { type: 'string'},\r",
													"        },\r",
													"        required: ['statusCode','message','error'],\r",
													"        additionalProperries : false,\r",
													"    };\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Values is correct\", function() {\r",
													"    var json = pm.response.json();\r",
													"    pm.expect(json.statusCode).to.equal(410);\r",
													"    pm.expect(json.message).to.include('Category not found');\r",
													"    pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Url}}/categories/12345",
											"host": [
												"{{Url}}"
											],
											"path": [
												"categories",
												"12345"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Categories_GET Product by Categories id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function() {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 200ms\", function() {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200); \r",
													"});\r",
													"pm.test(\"Response must be valid and have a body\", function() {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(\"Json must be an array\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.an('array');\r",
													"});\r",
													"pm.test(\"Schema is valid\", () => {\r",
													"    var schema = {\r",
													"        type: 'array',\r",
													"        items: {\r",
													"            type: 'object',\r",
													"            properties: {\r",
													"                id: {type: 'number'},\r",
													"                name: {type: 'string'},\r",
													"                price: {type: 'number'},\r",
													"                discount: {type: 'number'},\r",
													"                stock: {type: 'number'},\r",
													"                description: {type: ['string','null']},\r",
													"                categoryId: {type: 'number'},\r",
													"                supplierId: {type: 'number'},\r",
													"                category: {\r",
													"                    type: 'object',\r",
													"                    properties: {\r",
													"                        id: {type: 'number'},\r",
													"                        name: {type: 'string'},\r",
													"                        description: {type: ['string','null']}\r",
													"                    },\r",
													"                    required: ['id','name','description']\r",
													"                },\r",
													"                supplier: {\r",
													"                    type: 'object',\r",
													"                    properties: {\r",
													"                        id: {type: 'number'},\r",
													"                        name: {type: 'string'},\r",
													"                        email: {type: 'string'},\r",
													"                        phoneNumber: {type: 'string'},\r",
													"                        address: {type: 'string'}\r",
													"                    },\r",
													"                    required: ['id','name','email','phoneNumber','address']\r",
													"                }\r",
													"            },\r",
													"           required: ['id','name','price','discount','stock','categoryId','supplierId','category','supplier']\r",
													"        }\r",
													"    }\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Url}}/categories/3/products",
											"host": [
												"{{Url}}"
											],
											"path": [
												"categories",
												"3",
												"products"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "POST",
							"item": [
								{
									"name": "TC_Categories_POST",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function() {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"pm.test(\"Response time is less than 200ms\", function() {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"pm.test(\"Response must be valid and have a body\", function() {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(\"Json must be an object\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"pm.test('Schema is valid', () => {\r",
													"    var schema = {\r",
													"        type: 'object',\r",
													"        properties: {\r",
													"            id: {type: \"number\"},\r",
													"            name: {type: \"string\"},\r",
													"            description: {type: ['string','null']},\r",
													"        },\r",
													"        required: ['id','name','description'],\r",
													"        additionalProperties: false,\r",
													"    };\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Đồ gia dụng\",\r\n    \"description\": \"đồ gia dụng trong gia đình\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/categories",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Login",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"username\": \"tungnt@softech.vn\",\r\n  \"password\": \"123456789\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/auth/login",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Categories_POST duplicate name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function() {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Response time is less than 200ms\", function() {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"pm.test(\"Response must be valid and have a body\", function() {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(\"Json must be an object\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"pm.test(\"Schema is valid\", () => {\r",
													"    var schema = {\r",
													"        type: 'object',\r",
													"        properties : {\r",
													"            statusCode : {type: 'number'},\r",
													"            message: {type :'array', items: {type: 'string'}},\r",
													"            error: {type: 'string'},\r",
													"        },\r",
													"        required: ['statusCode','message','error'],\r",
													"        addtionalProperties: false,\r",
													"    };\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"pm.test('Values is correct', function() {\r",
													"    var json = pm.response.json();\r",
													"    pm.expect(json.statusCode).to.equal(400);\r",
													"    pm.expect(json.message).to.be.include('Name must be unique');\r",
													"    pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"quần áo em bé\",\r\n    \"description\": \"quần áo em bé cho cả boy và girl\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/categories",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Categories_POST name required",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('Name is required');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"description\": \"quần áo em bé cho cả boy và girl\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/categories",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Categories_POST name length less than 50",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 400', function() {\r",
													"    pm.response.to.be.have.status(400);\r",
													"});\r",
													"pm.test('Response time is less than 200ms', function() {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"pm.test('Response must be valid and have a body', function(){\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json; \r",
													"});\r",
													"pm.test('Json must be object', () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.an('object');\r",
													"} );\r",
													"pm.test('Schema is valid', () => {\r",
													"    var schema = {\r",
													"        type: 'object',\r",
													"        properties: {\r",
													"            statusCode: {type: 'number'},\r",
													"            message: {type: 'array', items: { type: 'string'}},\r",
													"            error: {type: 'string'},\r",
													"        },\r",
													"        requiered: ['statusCode','message','error'],\r",
													"        additionalProperties: false,\r",
													"    };\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"pm.test('Values is correct', function() {\r",
													"    var json =pm.response.json();\r",
													"    pm.expect(json.statusCode).to.equal(400);\r",
													"    pm.expect(json.message).to.include('Name must be greater than 1 and less than or equal 50 characters');\r",
													"    pm.expect(json.error).to.be.equal('Bad Request');\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"University of Science and Education - The University of Da Nang\",\r\n    \"description\": \"DHSP\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/categories",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Categories_POST name length greater than 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 400', function() {\r",
													"    pm.response.to.be.have.status(400);\r",
													"});\r",
													"pm.test('Response time is less than 200ms', function() {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"pm.test('Response must be valid and have a body', function(){\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json; \r",
													"});\r",
													"pm.test('Json must be object', () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.an('object');\r",
													"} );\r",
													"pm.test('Schema is valid', () => {\r",
													"    var schema = {\r",
													"        type: 'object',\r",
													"        properties: {\r",
													"            statusCode: {type: 'number'},\r",
													"            message: {type: 'array', items: { type: 'string'}},\r",
													"            error: {type: 'string'},\r",
													"        },\r",
													"        requiered: ['statusCode','message','error'],\r",
													"        additionalProperties: false,\r",
													"    };\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"pm.test('Values is correct', function() {\r",
													"    var json =pm.response.json();\r",
													"    pm.expect(json.statusCode).to.equal(400);\r",
													"    pm.expect(json.message).to.include('Name must be greater than 1 and less than or equal 50 characters');\r",
													"    pm.expect(json.error).to.be.equal('Bad Request');\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"\",\r\n    \"description\": \"DHSP\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/categories",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Categories_POST description null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 201', function() {\r",
													"    pm.response.to.be.have.status(201);\r",
													"});\r",
													"pm.test('Response time is less than 200ms', function() {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"pm.test('Response must be valid and have a body', function(){\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json; \r",
													"});\r",
													"pm.test('Json must be object', () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.an('object');\r",
													"} );\r",
													"pm.test('Schema is valid', () => {\r",
													"    var schema = {\r",
													"        type: 'object',\r",
													"        properties: {\r",
													"            id: {type: 'number'},\r",
													"            name: {type: 'string'},\r",
													"            description: {type: ['string','null']},\r",
													"        },\r",
													"        requiered: ['id','name','description'],\r",
													"        additionalProperties: false,\r",
													"    };\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Áo khoác\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/categories",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Categories_POST Unauthorized",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"chân váy\",\r\n    \"description\": \"chân váy baby\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/categories",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"categories"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PATCH",
							"item": [
								{
									"name": "TC_Categories_PATCH BY ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 200\", function() {\r",
													"    pm.response.to.be.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 200ms\", function() {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"pm.test('Response must be valid and have a body', function(){\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test('Json must be an object', () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"pm.test('Schema is valid', () => {\r",
													"    var schema = {\r",
													"        type: 'object',\r",
													"        properties: {\r",
													"            id: {type: 'number'},\r",
													"            name: {type: 'string'},\r",
													"            description: {type: ['string', 'null']},\r",
													"        },\r",
													"        required: ['id', 'name', 'description'],\r",
													"        additionalProperties: false,\r",
													"    };\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Giày nam\",\r\n    \"description\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/categories/27",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"categories",
												"27"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Categories_PATCH BY ID Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"pm.test('Schema is valid', () => {\r",
													"    var schema = {\r",
													"        type: 'object',\r",
													"        properties: {\r",
													"            statusCode: {type: 'number'},\r",
													"            message: {type: 'array', items: {type: 'string'}},\r",
													"            error: {type: 'string'},\r",
													"        },\r",
													"        required: ['statusCode','message',\r",
													"        'error'],\r",
													"        additionalProperties: false,\r",
													"    };\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"pm.test('Values is correct', function() {\r",
													"    var json = pm.response.json();  \r",
													"    pm.expect(json.statusCode).to.equal(400);\r",
													"    pm.expect(json.message).to.include('Validation failed (numeric string is expected)');\r",
													"    pm.expect(json.error).to.equal('Invalid route params');\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Giày\",\r\n    \"description\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/categories/1abc",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"categories",
												"1abc"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Categories_PATCH BY ID not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 410\", function() {\r",
													"    pm.response.to.be.have.status(410);\r",
													"});\r",
													"pm.test('Response time is less than 200ms', function() {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"pm.test('Response must be valid and have a body', function() {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test('Json must be a object', () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"pm.test('Schema is valid', () => {\r",
													"    var schema = {\r",
													"        type: 'object',\r",
													"        properties: {\r",
													"            statusCode: {type: 'number'},\r",
													"            message: {type: 'array', items: {type: 'string'}},\r",
													"            error: {type: 'string'},\r",
													"        },\r",
													"        required: ['statusCode','message','error'],\r",
													"        additionalPorperties: false,\r",
													"    };\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.eql(410);\r",
													"  pm.expect(json.message).to.include('Category not found');\r",
													"  pm.expect(json.error).to.eql('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Giày\",\r\n    \"description\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/categories/12345",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"categories",
												"12345"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Categories_PATCH duplicate name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.eql(400);\r",
													"  pm.expect(json.message).to.include('Name must be unique');\r",
													"  pm.expect(json.error).to.eql('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Điện thoại\",\r\n    \"description\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/categories/29",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"categories",
												"29"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "DELETE",
							"item": [
								{
									"name": "TC_Categories_DELETE BY ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 200', function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      message: { type: 'string' },\r",
													"    },\r",
													"    required: ['message'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.message).to.eql('Category deleted');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/categories/29",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"categories",
												"29"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Categories_DELETE BY ID not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 410', function () {\r",
													"  pm.response.to.have.status(410);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],  \r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.statusCode).to.eql(410);\r",
													"  pm.expect(jsonData.message).to.include('Category not found');\r",
													"  pm.expect(jsonData.error).to.eql('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://server.aptech.io/online-shop/categories/12345",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"categories",
												"12345"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Categories_DELETE BY ID Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.statusCode).to.eql(400);\r",
													"  pm.expect(jsonData.message).to.include('Validation failed (numeric string is expected)');\r",
													"  pm.expect(jsonData.error).to.eql('Invalid route params');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://server.aptech.io/online-shop/categories/1abc",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"categories",
												"1abc"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Customers",
					"item": [
						{
							"name": "GET",
							"item": [
								{
									"name": "TC_Customers_GET ALL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 200', function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a array', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('array');\r",
													"});\r",
													"pm.test(\"Schema is valid\", ()=> {\r",
													"    var schema = {\r",
													"        type: 'array',\r",
													"        items: {\r",
													"            type: 'object',\r",
													"            properties: {\r",
													"                id: {type: 'number'},\r",
													"                firstName: {type: 'string'},\r",
													"                lastName: {type: 'string'},\r",
													"                phoneNumber: {type: 'string'},\r",
													"                address: {type: 'string'},\r",
													"                email: {type: 'string'},\r",
													"                birthday: {type: ['string','null']},\r",
													"            },\r",
													"            required: ['id','firstName','lastName','phoneNumber','address','email','birthday'],\r",
													"            additionalProperties: false,\r",
													"        },\r",
													"    };\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://server.aptech.io/online-shop/customers",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Customers_GET BY ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 200', function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('Json must be an object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"    var schema ={\r",
													"        type: 'object',\r",
													"        properties: {\r",
													"                id: {type: 'number'},\r",
													"                firstName: {type: 'string'},\r",
													"                lastName: {type: 'string'},\r",
													"                phoneNumber: {type: 'string'},\r",
													"                address: {type: 'string'},\r",
													"                email: {type: 'string'},\r",
													"                birthday: {type: ['string','null']},\r",
													"        },\r",
													"        required: ['id','firstName','lastName','phoneNumber','address','email','birthday'],\r",
													"            additionalProperties: false,\r",
													"    };\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://server.aptech.io/online-shop/customers/8",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"customers",
												"8"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Customers_GET BY ID Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test('Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"pm.test('Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"pm.test('Json must be an object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"pm.test('Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('Values is correct', function () {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.statusCode).to.eql(400);\r",
													"  pm.expect(jsonData.message).to.include('Validation failed (numeric string is expected)');\r",
													"  pm.expect(jsonData.error).to.eql('Invalid route params');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://server.aptech.io/online-shop/customers/1abc",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"customers",
												"1abc"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Customers_GET BY ID not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 410', function () {\r",
													"  pm.response.to.have.status(410);\r",
													"});\r",
													"pm.test('Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"pm.test('Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"pm.test('Json must be an object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"pm.test('Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('Values is correct', function () {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.statusCode).to.eql(410);\r",
													"  pm.expect(jsonData.message).to.include('Customer not found');\r",
													"  pm.expect(jsonData.error).to.eql('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://server.aptech.io/online-shop/customers/1234567",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"customers",
												"1234567"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "POST",
							"item": [
								{
									"name": "TC_Customers_POST",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 201', function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test('Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('Json must be an object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"    var schema ={\r",
													"        type: 'object',\r",
													"        properties: {\r",
													"                id: {type: 'number'},\r",
													"                firstName: {type: 'string'},\r",
													"                lastName: {type: 'string'},\r",
													"                phoneNumber: {type: 'string'},\r",
													"                address: {type: 'string'},\r",
													"                email: {type: 'string'},\r",
													"                birthday: {type: ['string','null']},\r",
													"        },\r",
													"        required: ['id','firstName','lastName','phoneNumber','address','email','birthday'],\r",
													"            additionalProperties: false,\r",
													"    };\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Lieu\",\r\n    \"lastName\": \"Le\",\r\n    \"phoneNumber\": \"0901987654\",\r\n    \"address\": \"Gia Lai\",\r\n    \"birthday\": \"2003/08/15\",\r\n    \"email\": \"lexlieu@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/customers",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Customers_POST address required",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('Json must be an object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"    var schema ={\r",
													"        type: 'object',\r",
													"        properties: {\r",
													"            statusCode: { type: 'number' },\r",
													"            message: { type: 'array', items: { type: 'string' } },\r",
													"            error: { type: 'string' },\r",
													"        },\r",
													"        required: ['statusCode', 'message', 'error'],\r",
													"        additionalProperties: false,\r",
													"    };\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"pm.test('Values is correct', function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.statusCode).to.eql(400);\r",
													"    pm.expect(jsonData.message).to.include('address is required');\r",
													"    pm.expect(jsonData.error).to.eql('Bad Request');\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Ngan\",\r\n    \"lastName\": \"Nguyen\",\r\n    \"phoneNumber\": \"0901987012\",\r\n    \"birthday\": \"2003/04/13\",\r\n    \"email\": \"ngan@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/customers",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Customers_POST firstName required",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('Json must be an object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"    var schema ={\r",
													"        type: 'object',\r",
													"        properties: {\r",
													"            statusCode: { type: 'number' },\r",
													"            message: { type: 'array', items: { type: 'string' } },\r",
													"            error: { type: 'string' },\r",
													"        },\r",
													"        required: ['statusCode', 'message', 'error'],\r",
													"        additionalProperties: false,\r",
													"    };\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"pm.test('Values is correct', function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.statusCode).to.eql(400);\r",
													"    pm.expect(jsonData.message).to.include('firstName is required');\r",
													"    pm.expect(jsonData.error).to.eql('Bad Request');\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n    \"lastName\": \"Le\",\r\n    \"phoneNumber\": \"0901987655\",\r\n    \"address\": \"Gia Lai\",\r\n    \"birthday\": \"2003/08/25\",\r\n    \"email\": \"lieu@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/customers",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Customers_POST phoneNumber required",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('Json must be an object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"    var schema ={\r",
													"        type: 'object',\r",
													"        properties: {\r",
													"            statusCode: { type: 'number' },\r",
													"            message: { type: 'array', items: { type: 'string' } },\r",
													"            error: { type: 'string' },\r",
													"        },\r",
													"        required: ['statusCode', 'message', 'error'],\r",
													"        additionalProperties: false,\r",
													"    };\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"pm.test('Values is correct', function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.statusCode).to.eql(400);\r",
													"    pm.expect(jsonData.message).to.include('phoneNumber is required');\r",
													"    pm.expect(jsonData.error).to.eql('Bad Request');\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Kha\",\r\n    \"lastName\": \"Thieu\",\r\n    \"address\": \"Gia Lai\",\r\n    \"birthday\": \"2003/08/15\",\r\n    \"email\": \"kha@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/customers",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Customers_POST phoneNumber duplicate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('Json must be an object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"    var schema ={\r",
													"        type: 'object',\r",
													"        properties: {\r",
													"            statusCode: { type: 'number' },\r",
													"            message: { type: 'array', items: { type: 'string' } },\r",
													"            error: { type: 'string' },\r",
													"        },\r",
													"        required: ['statusCode', 'message', 'error'],\r",
													"        additionalProperties: false,\r",
													"    };\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"pm.test('Values is correct', function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.statusCode).to.eql(400);\r",
													"    pm.expect(jsonData.message).to.include('Phone Number must be unique');\r",
													"    pm.expect(jsonData.error).to.eql('Bad Request');\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Vy\",\r\n    \"lastName\": \"Lam\",\r\n    \"phoneNumber\": \"0901987654\",\r\n    \"address\": \"Da Nang\",\r\n    \"birthday\": \"2003/01/12\",\r\n    \"email\": \"vy@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/customers",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Customers_POST email required",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('Json must be an object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"    var schema ={\r",
													"        type: 'object',\r",
													"        properties: {\r",
													"            statusCode: { type: 'number' },\r",
													"            message: { type: 'array', items: { type: 'string' } },\r",
													"            error: { type: 'string' },\r",
													"        },\r",
													"        required: ['statusCode', 'message', 'error'],\r",
													"        additionalProperties: false,\r",
													"    };\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"pm.test('Values is correct', function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.statusCode).to.eql(400);\r",
													"    pm.expect(jsonData.message).to.include('email is required');\r",
													"    pm.expect(jsonData.error).to.eql('Bad Request');\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Hien\",\r\n    \"lastName\": \"Le\",\r\n    \"phoneNumber\": \"0901987659\",\r\n    \"address\": \"Nghe An\",\r\n    \"birthday\": \"2003/11/19\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/customers",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Customers_POST email duplicate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('Json must be an object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"    var schema ={\r",
													"        type: 'object',\r",
													"        properties: {\r",
													"            statusCode: { type: 'number' },\r",
													"            message: { type: 'array', items: { type: 'string' } },\r",
													"            error: { type: 'string' },\r",
													"        },\r",
													"        required: ['statusCode', 'message', 'error'],\r",
													"        additionalProperties: false,\r",
													"    };\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"pm.test('Values is correct', function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.statusCode).to.eql(400);\r",
													"    pm.expect(jsonData.message).to.include('Email must be unique');\r",
													"    pm.expect(jsonData.error).to.eql('Bad Request');\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Hằng\",\r\n    \"lastName\": \"Nguyen\",\r\n    \"phoneNumber\": \"0901987600\",\r\n    \"address\": \"Da Nang\",\r\n    \"birthday\": \"2003/11/20\",\r\n    \"email\": \"lexlieu@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/customers",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Customers_POST birthday null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 201', function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test('Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('Json must be an object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"    var schema ={\r",
													"        type: 'object',\r",
													"        properties: {\r",
													"                id: {type: 'number'},\r",
													"                firstName: {type: 'string'},\r",
													"                lastName: {type: 'string'},\r",
													"                phoneNumber: {type: 'string'},\r",
													"                address: {type: 'string'},\r",
													"                email: {type: 'string'},\r",
													"                birthday: {type: ['string','null']},\r",
													"        },\r",
													"        required: ['id','firstName','lastName','phoneNumber','address','email','birthday'],\r",
													"            additionalProperties: false,\r",
													"    };\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Vy\",\r\n    \"lastName\": \"Nguyen\",\r\n    \"phoneNumber\": \"0901987639\",\r\n    \"address\": \"Quang Nam\",\r\n    \"email\": \"xuanvy@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/customers",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Customers_POST firstName length less than 50",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('Json must be an object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"    var schema ={\r",
													"        type: 'object',\r",
													"        properties: {\r",
													"            statusCode: { type: 'number' },\r",
													"            message: { type: 'array', items: { type: 'string' } },\r",
													"            error: { type: 'string' },\r",
													"        },\r",
													"        required: ['statusCode', 'message', 'error'],\r",
													"        additionalProperties: false,\r",
													"    };\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"pm.test('Values is correct', function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.statusCode).to.eql(400);\r",
													"    pm.expect(jsonData.message).to.include('firstName must be greater than 1 and less than or equal 50 characters');\r",
													"    pm.expect(jsonData.error).to.eql('Bad Request');\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"University of Science and Education - The University of Da Nang\",\r\n    \"lastName\": \"Le\",\r\n    \"phoneNumber\": \"0901987600\",\r\n    \"address\": \"Gia Lai\",\r\n    \"birthday\": \"2003/08/15\",\r\n    \"email\": \"lllieu@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/customers",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Customers_POST firstName length greater than 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('Json must be an object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"    var schema ={\r",
													"        type: 'object',\r",
													"        properties: {\r",
													"            statusCode: { type: 'number' },\r",
													"            message: { type: 'array', items: { type: 'string' } },\r",
													"            error: { type: 'string' },\r",
													"        },\r",
													"        required: ['statusCode', 'message', 'error'],\r",
													"        additionalProperties: false,\r",
													"    };\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"pm.test('Values is correct', function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.statusCode).to.eql(400);\r",
													"    pm.expect(jsonData.message).to.include('firstName should not be empty');\r",
													"    pm.expect(jsonData.error).to.eql('Bad Request');\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"\",\r\n    \"lastName\": \"Le\",\r\n    \"phoneNumber\": \"0901987600\",\r\n    \"address\": \"Gia Lai\",\r\n    \"birthday\": \"2003/08/15\",\r\n    \"email\": \"lllieu@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/customers",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Customers_POST lastName required",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('Json must be an object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"    var schema ={\r",
													"        type: 'object',\r",
													"        properties: {\r",
													"            statusCode: { type: 'number' },\r",
													"            message: { type: 'array', items: { type: 'string' } },\r",
													"            error: { type: 'string' },\r",
													"        },\r",
													"        required: ['statusCode', 'message', 'error'],\r",
													"        additionalProperties: false,\r",
													"    };\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"pm.test('Values is correct', function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.statusCode).to.eql(400);\r",
													"    pm.expect(jsonData.message).to.include('lastName is required');\r",
													"    pm.expect(jsonData.error).to.eql('Bad Request');\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Hieu\",\r\n    \"phoneNumber\": \"0901987694\",\r\n    \"address\": \"Tien Ha\",\r\n    \"birthday\": \"2005/08/15\",\r\n    \"email\": \"hieu@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/customers",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Cutomers_POST lastName length less than 50",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('Json must be an object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"    var schema ={\r",
													"        type: 'object',\r",
													"        properties: {\r",
													"            statusCode: { type: 'number' },\r",
													"            message: { type: 'array', items: { type: 'string' } },\r",
													"            error: { type: 'string' },\r",
													"        },\r",
													"        required: ['statusCode', 'message', 'error'],\r",
													"        additionalProperties: false,\r",
													"    };\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"pm.test('Values is correct', function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.statusCode).to.eql(400);\r",
													"    pm.expect(jsonData.message).to.include('lastName must be greater than 1 and less than or equal 50 characters');\r",
													"    pm.expect(jsonData.error).to.eql('Bad Request');\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Man\",\r\n    \"lastName\": \"University of Science and Education - The University of Da Nang\",\r\n    \"phoneNumber\": \"0901987724\",\r\n    \"address\": \"Gia Lai\",\r\n    \"birthday\": \"2003/08/15\",\r\n    \"email\": \"man@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/customers",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Customers_POST lastName length greater than 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('Json must be an object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"    var schema ={\r",
													"        type: 'object',\r",
													"        properties: {\r",
													"            statusCode: { type: 'number' },\r",
													"            message: { type: 'array', items: { type: 'string' } },\r",
													"            error: { type: 'string' },\r",
													"        },\r",
													"        required: ['statusCode', 'message', 'error'],\r",
													"        additionalProperties: false,\r",
													"    };\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"pm.test('Values is correct', function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.statusCode).to.eql(400);\r",
													"    pm.expect(jsonData.message).to.include('lastName should not be empty');\r",
													"    pm.expect(jsonData.error).to.eql('Bad Request');\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Hanh\",\r\n    \"lastName\": \"\",\r\n    \"phoneNumber\": \"0901987777\",\r\n    \"address\": \"Quảng Nam\",\r\n    \"birthday\": \"2003/08/11\",\r\n    \"email\": \"hanh@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/customers",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Customers_POST phoneNumber length less than 50",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('Json must be an object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"    var schema ={\r",
													"        type: 'object',\r",
													"        properties: {\r",
													"            statusCode: { type: 'number' },\r",
													"            message: { type: 'array', items: { type: 'string' } },\r",
													"            error: { type: 'string' },\r",
													"        },\r",
													"        required: ['statusCode', 'message', 'error'],\r",
													"        additionalProperties: false,\r",
													"    };\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"pm.test('Values is correct', function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.statusCode).to.eql(400);\r",
													"    pm.expect(jsonData.message).to.include('phoneNumber must be greater than 1 and less than or equal 50 charactersd');\r",
													"    pm.expect(jsonData.error).to.eql('Bad Request');\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Ánh\",\r\n    \"lastName\": \"Ho\",\r\n    \"phoneNumber\": \"0999876543219807654235173895068493735242425364858595938214367\",\r\n    \"address\": \"Da Nang\",\r\n    \"birthday\": \"1998/08/15\",\r\n    \"email\": \"anh@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/customers",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Customers_POST phoneNumber length greater than 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('Json must be an object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"    var schema ={\r",
													"        type: 'object',\r",
													"        properties: {\r",
													"            statusCode: { type: 'number' },\r",
													"            message: { type: 'array', items: { type: 'string' } },\r",
													"            error: { type: 'string' },\r",
													"        },\r",
													"        required: ['statusCode', 'message', 'error'],\r",
													"        additionalProperties: false,\r",
													"    };\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"pm.test('Values is correct', function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.statusCode).to.eql(400);\r",
													"    pm.expect(jsonData.message).to.include('phoneNumber should not be empty');\r",
													"    pm.expect(jsonData.error).to.eql('Bad Request');\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Ánh\",\r\n    \"lastName\": \"Le\",\r\n    \"phoneNumber\": \"\",\r\n    \"address\": \"Gia Lai\",\r\n    \"birthday\": \"1997/08/15\",\r\n    \"email\": \"anhhh@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/customers",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Customers_POST address length greater than 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('Json must be an object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"    var schema ={\r",
													"        type: 'object',\r",
													"        properties: {\r",
													"            statusCode: { type: 'number' },\r",
													"            message: { type: 'array', items: { type: 'string' } },\r",
													"            error: { type: 'string' },\r",
													"        },\r",
													"        required: ['statusCode', 'message', 'error'],\r",
													"        additionalProperties: false,\r",
													"    };\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"pm.test('Values is correct', function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.statusCode).to.eql(400);\r",
													"    pm.expect(jsonData.message).to.include('address should not be empty');\r",
													"    pm.expect(jsonData.error).to.eql('Bad Request');\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Ngan\",\r\n    \"lastName\": \"Nguyen\",\r\n    \"phoneNumber\": \"0901987012\",\r\n    \"address\": \"\",\r\n    \"birthday\": \"2003/08/15\",\r\n    \"email\": \"ngan12@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/customers",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Customers_POST email length less than 50",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('Json must be an object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"    var schema ={\r",
													"        type: 'object',\r",
													"        properties: {\r",
													"            statusCode: { type: 'number' },\r",
													"            message: { type: 'array', items: { type: 'string' } },\r",
													"            error: { type: 'string' },\r",
													"        },\r",
													"        required: ['statusCode', 'message', 'error'],\r",
													"        additionalProperties: false,\r",
													"    };\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"pm.test('Values is correct', function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.statusCode).to.eql(400);\r",
													"    pm.expect(jsonData.message).to.include('email must be greater than 1 and less than or equal 50 charactersd');\r",
													"    pm.expect(jsonData.error).to.eql('Bad Request');\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Ngan\",\r\n    \"lastName\": \"Nguyen\",\r\n    \"phoneNumber\": \"0901987012\",\r\n    \"address\": \"Da Nang\",\r\n    \"birthday\": \"2003/08/15\",\r\n    \"email\": \"ngannganngannganngannganngannganngannganngannganngan12@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/customers",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Customers_POST email length greater than 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('Json must be an object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"    var schema ={\r",
													"        type: 'object',\r",
													"        properties: {\r",
													"            statusCode: { type: 'number' },\r",
													"            message: { type: 'array', items: { type: 'string' } },\r",
													"            error: { type: 'string' },\r",
													"        },\r",
													"        required: ['statusCode', 'message', 'error'],\r",
													"        additionalProperties: false,\r",
													"    };\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"pm.test('Values is correct', function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.statusCode).to.eql(400);\r",
													"    pm.expect(jsonData.message).to.include('email should not be empty','email must be an email');\r",
													"    pm.expect(jsonData.error).to.eql('Bad Request');\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Ngan\",\r\n    \"lastName\": \"Nguyen\",\r\n    \"phoneNumber\": \"0901987012\",\r\n    \"address\": \"Da Nang\",\r\n    \"birthday\": \"2003/08/15\",\r\n    \"email\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/customers",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Customers_POST email format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('Json must be an object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"    var schema ={\r",
													"        type: 'object',\r",
													"        properties: {\r",
													"            statusCode: { type: 'number' },\r",
													"            message: { type: 'array', items: { type: 'string' } },\r",
													"            error: { type: 'string' },\r",
													"        },\r",
													"        required: ['statusCode', 'message', 'error'],\r",
													"        additionalProperties: false,\r",
													"    };\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"pm.test('Values is correct', function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.statusCode).to.eql(400);\r",
													"    pm.expect(jsonData.message).to.include('email must be an email');\r",
													"    pm.expect(jsonData.error).to.eql('Bad Request');\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Ngan\",\r\n    \"lastName\": \"Nguyen\",\r\n    \"phoneNumber\": \"0901987012\",\r\n    \"address\": \"Da Nang\",\r\n    \"birthday\": \"2003/08/15\",\r\n    \"email\": \"ngan12@mail\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/customers",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Customers_POST birthday format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('Json must be an object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"    var schema ={\r",
													"        type: 'object',\r",
													"        properties: {\r",
													"            statusCode: { type: 'number' },\r",
													"            message: { type: 'array', items: { type: 'string' } },\r",
													"            error: { type: 'string' },\r",
													"        },\r",
													"        required: ['statusCode', 'message', 'error'],\r",
													"        additionalProperties: false,\r",
													"    };\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"pm.test('Values is correct', function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.statusCode).to.eql(400);\r",
													"    pm.expect(jsonData.message).to.include('birthday must be birthday');\r",
													"    pm.expect(jsonData.error).to.eql('Bad Request');\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Ngan\",\r\n    \"lastName\": \"Nguyen\",\r\n    \"phoneNumber\": \"0901987012\",    \r\n    \"address\": \"Da Nang\",\r\n    \"birthday\": \"123454557576\",\r\n    \"email\": \"ngan12@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/customers",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"customers"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PATCH",
							"item": [
								{
									"name": "TC_Customers_PATCH BY ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 200', function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('Json must be an object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"    var schema ={\r",
													"        type: 'object',\r",
													"        properties: {\r",
													"                id: {type: 'number'},\r",
													"                firstName: {type: 'string'},\r",
													"                lastName: {type: 'string'},\r",
													"                phoneNumber: {type: 'string'},\r",
													"                address: {type: 'string'},\r",
													"                email: {type: 'string'},\r",
													"                birthday: {type: ['string','null']},\r",
													"        },\r",
													"        required: ['id','firstName','lastName','phoneNumber','address','email','birthday'],\r",
													"            additionalProperties: false,\r",
													"    };\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"JungKook\",\r\n    \"lastName\": \"Jeon\",\r\n    \"phoneNumber\": \"0902102103\",\r\n    \"address\": \"Ho Chi Minh\",\r\n    \"birthday\": \"1997/09/01\",\r\n    \"email\": \"jungkook@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/customers/13",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"customers",
												"13"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Customers_PATCH BY ID Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('Json must be an object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"    var schema ={\r",
													"        type: 'object',\r",
													"        properties: {\r",
													"            statusCode: { type: 'number' },\r",
													"            message: { type: 'array', items: { type: 'string' } },\r",
													"            error: { type: 'string' },\r",
													"        },\r",
													"        required: ['statusCode', 'message', 'error'],\r",
													"        additionalProperties: false,\r",
													"    };\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"pm.test('Values is correct', function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.statusCode).to.eql(400);\r",
													"    pm.expect(jsonData.message).to.include('Validation failed (numeric string is expected)');\r",
													"    pm.expect(jsonData.error).to.eql('Invalid route params');\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Yen\",\r\n    \"lastName\": \"Pham\",\r\n    \"phoneNumber\": \"0902102104\",\r\n    \"address\": \"Ho Chi Minh\",\r\n    \"birthday\": \"2001/09/01\",\r\n    \"email\": \"yen@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/customers/1abc",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"customers",
												"1abc"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Customers_PATCH BY ID not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 410', function () {\r",
													"  pm.response.to.have.status(410);\r",
													"});\r",
													"\r",
													"pm.test('Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('Json must be an object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"    var schema ={\r",
													"        type: 'object',\r",
													"        properties: {\r",
													"            statusCode: { type: 'number' },\r",
													"            message: { type: 'array', items: { type: 'string' } },\r",
													"            error: { type: 'string' },\r",
													"        },\r",
													"        required: ['statusCode', 'message', 'error'],\r",
													"        additionalProperties: false,\r",
													"    };\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"pm.test('Values is correct', function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.statusCode).to.eql(410);\r",
													"    pm.expect(jsonData.message).to.include('Customer not found');\r",
													"    pm.expect(jsonData.error).to.eql('Bad Request');\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Anh\",\r\n    \"lastName\": \"Phạm\",\r\n    \"phoneNumber\": \"0902102123\",\r\n    \"address\": \"Ha Noi\",\r\n    \"birthday\": \"2003/09/01\",\r\n    \"email\": \"kimanh@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/customers/12345",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"customers",
												"12345"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Customers_PATCH duplicate phoneNumber",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('Json must be an object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"    var schema ={\r",
													"        type: 'object',\r",
													"        properties: {\r",
													"            statusCode: { type: 'number' },\r",
													"            message: { type: 'array', items: { type: 'string' } },\r",
													"            error: { type: 'string' },\r",
													"        },\r",
													"        required: ['statusCode', 'message', 'error'],\r",
													"        additionalProperties: false,\r",
													"    };\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"pm.test('Values is correct', function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.statusCode).to.eql(400);\r",
													"    pm.expect(jsonData.message).to.include('Phone number must be unique');\r",
													"    pm.expect(jsonData.error).to.eql('Bad Request');\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Hien\",\r\n    \"lastName\": \"Dang\",\r\n    \"phoneNumber\": \"0902102103\",\r\n    \"address\": \"Ho Chi Minh\",\r\n    \"birthday\": \"1999/19/11\",\r\n    \"email\": \"thihien@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/customers/10",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"customers",
												"10"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Customers_PATCH duplicate email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('Json must be an object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"    var schema ={\r",
													"        type: 'object',\r",
													"        properties: {\r",
													"            statusCode: { type: 'number' },\r",
													"            message: { type: 'array', items: { type: 'string' } },\r",
													"            error: { type: 'string' },\r",
													"        },\r",
													"        required: ['statusCode', 'message', 'error'],\r",
													"        additionalProperties: false,\r",
													"    };\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"pm.test('Values is correct', function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.statusCode).to.eql(400);\r",
													"    pm.expect(jsonData.message).to.include('Email must be unique');\r",
													"    pm.expect(jsonData.error).to.eql('Bad Request');\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Linh\",\r\n    \"lastName\": \"Ho\",\r\n    \"phoneNumber\": \"0902102104\",\r\n    \"address\": \"Ho Chi Minh\",\r\n    \"birthday\": \"1976/09/01\",\r\n    \"email\": \"jungkook@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/customers/10",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"customers",
												"10"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "DELETE",
							"item": [
								{
									"name": "TC_Customers_DELETE BY ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 200', function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      message: { type: 'string' },\r",
													"    },\r",
													"    required: ['message'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.message).to.eql('Customer deleted');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/customers/48",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"customers",
												"48"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Customers_DELETE BY ID not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 410', function () {\r",
													"  pm.response.to.have.status(410);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],  \r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.statusCode).to.eql(410);\r",
													"  pm.expect(jsonData.message).to.include('Customer not found');\r",
													"  pm.expect(jsonData.error).to.eql('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://server.aptech.io/online-shop/customers/1234",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"customers",
												"1234"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Customers_DELETE BY ID Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.statusCode).to.eql(400);\r",
													"  pm.expect(jsonData.message).to.include('Validation failed (numeric string is expected)');\r",
													"  pm.expect(jsonData.error).to.eql('Invalid route params');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://server.aptech.io/online-shop/customers/1abc",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"customers",
												"1abc"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Employees",
					"item": [
						{
							"name": "GET",
							"item": [
								{
									"name": "TC_Employees_GET ALL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 200', function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a array', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('array');\r",
													"});\r",
													"pm.test(\"Schema is valid\", ()=> {\r",
													"    var schema = {\r",
													"        type: 'array',\r",
													"        items: {\r",
													"            type: 'object',\r",
													"            properties: {\r",
													"                id: {type: 'number'},\r",
													"                firstName: {type: 'string'},\r",
													"                lastName: {type: 'string'},\r",
													"                phoneNumber: {type: 'string'},\r",
													"                address: {type: 'string'},\r",
													"                email: {type: 'string'},\r",
													"                birthday: {type: ['string','null']},\r",
													"            },\r",
													"            required: ['id','firstName','lastName','phoneNumber','address','email','birthday'],\r",
													"            additionalProperties: false,\r",
													"        },\r",
													"    };\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://server.aptech.io/online-shop/employees",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"employees"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Employees_GET BY ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 200', function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('Json must be an object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"    var schema ={\r",
													"        type: 'object',\r",
													"        properties: {\r",
													"                id: {type: 'number'},\r",
													"                firstName: {type: 'string'},\r",
													"                lastName: {type: 'string'},\r",
													"                phoneNumber: {type: 'string'},\r",
													"                address: {type: 'string'},\r",
													"                email: {type: 'string'},\r",
													"                birthday: {type: ['string','null']},\r",
													"        },\r",
													"        required: ['id','firstName','lastName','phoneNumber','address','email','birthday'],\r",
													"            additionalProperties: false,\r",
													"    };\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://server.aptech.io/online-shop/employees/12",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"employees",
												"12"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Employees_GET BY ID Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.statusCode).to.eql(400);\r",
													"  pm.expect(jsonData.message).to.include('Validation failed (numeric string is expected)');\r",
													"  pm.expect(jsonData.error).to.eql('Invalid route params');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://server.aptech.io/online-shop/employees/1abc",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"employees",
												"1abc"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Employees_GET BY ID not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 410', function () {\r",
													"  pm.response.to.have.status(410);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.statusCode).to.eql(400);\r",
													"  pm.expect(jsonData.message).to.include('Employee not found');\r",
													"  pm.expect(jsonData.error).to.eql('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://server.aptech.io/online-shop/employees/1234",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"employees",
												"1234"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "POST",
							"item": [
								{
									"name": "TC_Employees_POST",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 201', function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"        properties: {\r",
													"                id: {type: 'number'},\r",
													"                firstName: {type: 'string'},\r",
													"                lastName: {type: 'string'},\r",
													"                phoneNumber: {type: 'string'},\r",
													"                address: {type: 'string'},\r",
													"                email: {type: 'string'},\r",
													"                birthday: {type: ['string','null']},\r",
													"        },\r",
													"        required: ['id','firstName','lastName','phoneNumber','address','email','birthday'],\r",
													"            additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Kha\",\r\n    \"lastName\": \"Trung\",\r\n    \"phoneNumber\": \"09019871589\",\r\n    \"address\": \"Duc Pho\",\r\n    \"birthday\": \"2003/08/15\",\r\n    \"email\": \"trungkha@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/employees",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"employees"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Employees_POST firstName required",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.statusCode).to.eql(400);\r",
													"  pm.expect(jsonData.message).to.include('firstName is required');\r",
													"  pm.expect(jsonData.error).to.eql('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"lastName\": \"Trung\",\r\n    \"phoneNumber\": \"09019871589\",\r\n    \"address\": \"Duc Pho\",\r\n    \"birthday\": \"2003/08/15\",\r\n    \"email\": \"trungkha@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/employees",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"employees"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Employees_POST firstName length less than 50",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.statusCode).to.eql(400);\r",
													"  pm.expect(jsonData.message).to.include('firstName must be greater than 1 and less than or equal 50 characters');\r",
													"  pm.expect(jsonData.error).to.eql('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"KhaKhaKhaKhaKhaKhaKhaKhaKhaKhaKhaKhaKhaKhaKhaKhaKhaKhaKhaKhaKha\",\r\n    \"lastName\": \"Thieu\",\r\n    \"phoneNumber\": \"09019871201\",\r\n    \"address\": \"Duc Pho\",\r\n    \"birthday\": \"1998/08/15\",\r\n    \"email\": \"tkha@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/employees",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"employees"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Employees_POST firstName greater than 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.statusCode).to.eql(400);\r",
													"  pm.expect(jsonData.message).to.include('firstName should not be empty');\r",
													"  pm.expect(jsonData.error).to.eql('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"\",\r\n    \"lastName\": \"Le\",\r\n    \"phoneNumber\": \"09019871063\",\r\n    \"address\": \"Duc Pho\",\r\n    \"birthday\": \"1996/04/05\",\r\n    \"email\": \"kkha@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/employees",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"employees"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Employees_POST lastName length less than 50",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.statusCode).to.eql(400);\r",
													"  pm.expect(jsonData.message).to.include('lastName must be greater than 1 and less than or equal 50 characters');\r",
													"  pm.expect(jsonData.error).to.eql('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Hieu\",\r\n    \"lastName\": \"TrungTrungTrungTrungTrungTrungTrungTrungTrungTrungTrungTrungTrung\",\r\n    \"phoneNumber\": \"09019871103\",\r\n    \"address\": \"Duc Pho\",\r\n    \"birthday\": \"2003/08/15\",\r\n    \"email\": \"hieu@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/employees",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"employees"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Employees_POST lastName greater than 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.statusCode).to.eql(400);\r",
													"  pm.expect(jsonData.message).to.include('lastName should not be empty');\r",
													"  pm.expect(jsonData.error).to.eql('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Tam\",\r\n    \"lastName\": \"\",\r\n    \"phoneNumber\": \"0901987309\",\r\n    \"address\": \"Duc Pho\",\r\n    \"birthday\": \"2003/08/15\",\r\n    \"email\": \"tam@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/employees",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"employees"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Employees_POST lastName required",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.statusCode).to.eql(400);\r",
													"  pm.expect(jsonData.message).to.include('lastName is required');\r",
													"  pm.expect(jsonData.error).to.eql('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Pha\",\r\n    \"phoneNumber\": \"09019871346\",\r\n    \"address\": \"Duc Pho\",\r\n    \"birthday\": \"2001/06/01\",\r\n    \"email\": \"pha@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/employees",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"employees"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Employees_POST phoneNumber required",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.statusCode).to.eql(400);\r",
													"  pm.expect(jsonData.message).to.include('phoneNumber is required');\r",
													"  pm.expect(jsonData.error).to.eql('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Han\",\r\n    \"lastName\": \"Pham\",\r\n    \"address\": \"Duc Pho\",\r\n    \"birthday\": \"2003/08/15\",\r\n    \"email\": \"han@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/employees",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"employees"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Employees_POST phoneNumber duplicate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.statusCode).to.eql(400);\r",
													"  pm.expect(jsonData.message).to.include('lastName must be unique');\r",
													"  pm.expect(jsonData.error).to.eql('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Han\",\r\n    \"lastName\": \"Le\",\r\n    \"phoneNumber\": \"09019871589\",\r\n    \"address\": \"Duc Pho\",\r\n    \"birthday\": \"2003/08/15\",\r\n    \"email\": \"han@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/employees",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"employees"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Employees_POST phoneNumber length less than 15",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.statusCode).to.eql(400);\r",
													"  pm.expect(jsonData.message).to.include('phoneNumber must be greater than 1 and less than or equal 15 characters');\r",
													"  pm.expect(jsonData.error).to.eql('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Pha\",\r\n    \"lastName\": \"Le\",\r\n    \"phoneNumber\": \"090198713466664578\",\r\n    \"address\": \"Duc Pho\",\r\n    \"birthday\": \"2001/06/01\",\r\n    \"email\": \"pha@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/employees",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"employees"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Employees_POST phoneNumber greater than 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.statusCode).to.eql(400);\r",
													"  pm.expect(jsonData.message).to.include('phoneNumber should not be empty');\r",
													"  pm.expect(jsonData.error).to.eql('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Pha\",\r\n    \"lastName\": \"Le\",\r\n    \"phoneNumber\": \"\",\r\n    \"address\": \"Duc Pho\",\r\n    \"birthday\": \"2001/06/01\",\r\n    \"email\": \"pha@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/employees",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"employees"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Employees_POST address required",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.statusCode).to.eql(400);\r",
													"  pm.expect(jsonData.message).to.include('address is required');\r",
													"  pm.expect(jsonData.error).to.eql('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Ngan\",\r\n    \"lastName\": \"Nguyen\",\r\n    \"phoneNumber\": \"0901987012\",\r\n    \"birthday\": \"2003/04/13\",\r\n    \"email\": \"ngan@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/employees",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"employees"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Employees_POST address length greater than 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.statusCode).to.eql(400);\r",
													"  pm.expect(jsonData.message).to.include('address should not be empty');\r",
													"  pm.expect(jsonData.error).to.eql('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Ngan\",\r\n    \"lastName\": \"Nguyen\",\r\n    \"phoneNumber\": \"0901987012\",\r\n    \"address\": \"\",\r\n    \"birthday\": \"2003/08/15\",\r\n    \"email\": \"ngan12@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/employees",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"employees"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Employees_POST email required",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.statusCode).to.eql(400);\r",
													"  pm.expect(jsonData.message).to.include('email is required');\r",
													"  pm.expect(jsonData.error).to.eql('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Hien\",\r\n    \"lastName\": \"Le\",\r\n    \"phoneNumber\": \"0901987659\",\r\n    \"address\": \"Nghe An\",\r\n    \"birthday\": \"2003/11/19\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/employees",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"employees"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Employees_POST email duplicate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.statusCode).to.eql(400);\r",
													"  pm.expect(jsonData.message).to.include('email must be unique');\r",
													"  pm.expect(jsonData.error).to.eql('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Hằng\",\r\n    \"lastName\": \"Nguyen\",\r\n    \"phoneNumber\": \"0901987600\",\r\n    \"address\": \"Da Nang\",\r\n    \"birthday\": \"2003/11/20\",\r\n    \"email\": \"trungkha@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/employees",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"employees"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Employees_POST email length less than 50",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.statusCode).to.eql(400);\r",
													"  pm.expect(jsonData.message).to.include('email must be greater than 1 and less than or equal 50 characters');\r",
													"  pm.expect(jsonData.error).to.eql('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Ngan\",\r\n    \"lastName\": \"Nguyen\",\r\n    \"phoneNumber\": \"0901987012\",\r\n    \"address\": \"Da Nang\",\r\n    \"birthday\": \"2003/08/15\",\r\n    \"email\": \"ngannganngannganngannganngannganngannganngannganngan12@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/employees",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"employees"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Employees_POST email length greater than 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.statusCode).to.eql(400);\r",
													"  pm.expect(jsonData.message).to.include('email should not be empty','email must be an email');\r",
													"  pm.expect(jsonData.error).to.eql('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Ngan\",\r\n    \"lastName\": \"Nguyen\",\r\n    \"phoneNumber\": \"0901987012\",\r\n    \"address\": \"Da Nang\",\r\n    \"birthday\": \"2003/08/15\",\r\n    \"email\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/employees",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"employees"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Employees_POST email format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.statusCode).to.eql(400);\r",
													"  pm.expect(jsonData.message).to.include('email must be an email');\r",
													"  pm.expect(jsonData.error).to.eql('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Ngan\",\r\n    \"lastName\": \"Nguyen\",\r\n    \"phoneNumber\": \"0901987012\",\r\n    \"address\": \"Da Nang\",\r\n    \"birthday\": \"2003/08/15\",\r\n    \"email\": \"ngan12@mail\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/employees",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"employees"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Employees_POST birthday null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 201', function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"        properties: {\r",
													"                id: {type: 'number'},\r",
													"                firstName: {type: 'string'},\r",
													"                lastName: {type: 'string'},\r",
													"                phoneNumber: {type: 'string'},\r",
													"                address: {type: 'string'},\r",
													"                email: {type: 'string'},\r",
													"                birthday: {type: ['string','null']},\r",
													"        },\r",
													"        required: ['id','firstName','lastName','phoneNumber','address','email','birthday'],\r",
													"            additionalProperties: false,\r",
													"  };\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Vy\",\r\n    \"lastName\": \"Nguyen\",\r\n    \"phoneNumber\": \"0901987601\",\r\n    \"address\": \"Quang Nam\",\r\n    \"email\": \"xvy@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/employees",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"employees"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Employees_POST birthday format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.statusCode).to.eql(400);\r",
													"  pm.expect(jsonData.message).to.include('birthday must be birthday');\r",
													"  pm.expect(jsonData.error).to.eql('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Ngan\",\r\n    \"lastName\": \"Nguyen\",\r\n    \"phoneNumber\": \"0901987012\",    \r\n    \"address\": \"Da Nang\",\r\n    \"birthday\": \"123454557576\",\r\n    \"email\": \"ngan12@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/employees",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"employees"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PATCH",
							"item": [
								{
									"name": "TC_Employees_PATCH BY ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 200', function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"        properties: {\r",
													"                id: {type: 'number'},\r",
													"                firstName: {type: 'string'},\r",
													"                lastName: {type: 'string'},\r",
													"                phoneNumber: {type: 'string'},\r",
													"                address: {type: 'string'},\r",
													"                email: {type: 'string'},\r",
													"                birthday: {type: ['string','null']},\r",
													"        },\r",
													"        required: ['id','firstName','lastName','phoneNumber','address','email','birthday'],\r",
													"            additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"JungKook\",\r\n    \"lastName\": \"Jeon\",\r\n    \"phoneNumber\": \"0902102103\",\r\n    \"address\": \"Ho Chi Minh\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/employees/13",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"employees",
												"13"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Employees_PATCH BY ID Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('Validation failed (numeric string is expected)');\r",
													"  pm.expect(json.error).to.equal('Invalid route params');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Yen\",\r\n    \"lastName\": \"Pham\",\r\n    \"phoneNumber\": \"0902102104\",\r\n    \"address\": \"Ho Chi Minh\",\r\n    \"birthday\": \"2001/09/01\",\r\n    \"email\": \"yen@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/employees/1abc",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"employees",
												"1abc"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Employees_PATCH BY ID not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 410', function () {\r",
													"  pm.response.to.have.status(410);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.eql(410);\r",
													"  pm.expect(json.message).to.include('Category not found');\r",
													"  pm.expect(json.error).to.eql('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Anh\",\r\n    \"lastName\": \"Phạm\",\r\n    \"phoneNumber\": \"0902102123\",\r\n    \"address\": \"Ha Noi\",\r\n    \"birthday\": \"2003/09/01\",\r\n    \"email\": \"kimanh@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/employees/12345",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"employees",
												"12345"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Employees_PATCH duplicate phoneNumber",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.eql(400);\r",
													"  pm.expect(json.message).to.include('phoneNumber must be unique');\r",
													"  pm.expect(json.error).to.eql('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Hien\",\r\n    \"lastName\": \"Dang\",\r\n    \"phoneNumber\": \"0901.111.222\",\r\n    \"address\": \"Ho Chi Minh\",\r\n    \"birthday\": \"1999/19/11\",\r\n    \"email\": \"thihien@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/employees/17",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"employees",
												"17"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Employees_PATCH duplicate email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.eql(400);\r",
													"  pm.expect(json.message).to.include('email must be unique');\r",
													"  pm.expect(json.error).to.eql('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Linh\",\r\n    \"lastName\": \"Ho\",\r\n    \"phoneNumber\": \"0902102104\",\r\n    \"address\": \"Ho Chi Minh\",\r\n    \"birthday\": \"1976/09/01\",\r\n    \"email\": \"trungkha@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/employees/19",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"employees",
												"19"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "DELETE",
							"item": [
								{
									"name": "TC_Employees_DELETE BY ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 200', function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      message: { type: 'string' },\r",
													"    },\r",
													"    required: ['message'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.message).to.eql('Employee deleted');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://server.aptech.io/online-shop/employees/15",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"employees",
												"15"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Employees_DELETE BY ID not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 410', function () {\r",
													"  pm.response.to.have.status(410);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],  \r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.statusCode).to.eql(410);\r",
													"  pm.expect(jsonData.message).to.include('Employee not found');\r",
													"  pm.expect(jsonData.error).to.eql('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://server.aptech.io/online-shop/employees/12345",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"employees",
												"12345"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Employees_DELETE BY ID Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.statusCode).to.eql(400);\r",
													"  pm.expect(jsonData.message).to.include('Validation failed (numeric string is expected)');\r",
													"  pm.expect(jsonData.error).to.eql('Invalid route params');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://server.aptech.io/online-shop/employees/1abc",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"employees",
												"1abc"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Suppliers",
					"item": [
						{
							"name": "GET",
							"item": [
								{
									"name": "TC_Suppliers_GET ALL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 200', function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('Json must be an array', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('array');\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'array',\r",
													"    items: {\r",
													"      type: 'object',\r",
													"      properties: {\r",
													"        id: { type: 'number' },\r",
													"        name: { type: 'string' },\r",
													"        phoneNumber: {type: 'string'},\r",
													"        email: {type: 'string'},\r",
													"        address: {type: 'string'}\r",
													"      },\r",
													"      required: ['id', 'name', 'phoneNumber','email','address'],\r",
													"      additionalProperties: false\r",
													"    },\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://server.aptech.io/online-shop/suppliers",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"suppliers"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Suppliers_GET BY ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 200', function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      \r",
													"        id: { type: 'number' },\r",
													"        name: { type: 'string' },\r",
													"        phoneNumber: {type: 'string'},\r",
													"        email: {type: 'string'},\r",
													"        address: {type: 'string'}\r",
													"    },\r",
													"    required: ['id', 'name', 'phoneNumber','email','address'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://server.aptech.io/online-shop/suppliers/2",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"suppliers",
												"2"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Suppliers_GET BY ID Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.statusCode).to.eql(400);\r",
													"  pm.expect(jsonData.message).to.include('Validation failed (numeric string is expected)');\r",
													"  pm.expect(jsonData.error).to.eql('Invalid route params');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://server.aptech.io/online-shop/suppliers/1abc",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"suppliers",
												"1abc"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Suppliers_GET BY ID not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 410', function () {\r",
													"  pm.response.to.have.status(410);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(410);\r",
													"  pm.expect(json.message).to.include('Category not found');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://server.aptech.io/online-shop/suppliers/1234567",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"suppliers",
												"1234567"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "POST",
							"item": [
								{
									"name": "TC_Suppliers_POST",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 201', function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      \r",
													"        id: { type: 'number' },\r",
													"        name: { type: 'string' },\r",
													"        phoneNumber: {type: 'string'},\r",
													"        email: {type: 'string'},\r",
													"        address: {type: 'string'}\r",
													"    },\r",
													"    required: ['id', 'name', 'phoneNumber','email','address'],\r",
													"     additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Lieu\",\r\n    \"email\": \"lexlieu@gmail.com\",\r\n    \"phoneNumber\": \"0901987654\",\r\n    \"address\": \"Gia Lai\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/suppliers",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"suppliers"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Suppliers_POST name required",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"     additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('Name is required');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"ha@gmail.com\",\r\n    \"phoneNumber\": \"0901987345\",\r\n    \"address\": \"Gia Lai\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/suppliers",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"suppliers"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Suppliers_POST name length less than 100",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"     additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('name must be greater than 1 and less than or equal 100 characters');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"BichLieuBichLieuBichLieuBichLieuBichLieuBichLieuBichLieuBichLieuBichLieuBichLieuBichLieuBichLieuBichLieu\",\r\n    \"email\": \"han@gmail.com\",\r\n    \"phoneNumber\": \"0901987245\",\r\n    \"address\": \"Gia Lai\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/suppliers",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"suppliers"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Suppliers_POST name greater than 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"     additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('name shound not be empty');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"\",\r\n    \"phoneNumber\": \"09019871063\",\r\n    \"email\": \"kkha@gmail.com\",\r\n    \"address\": \"Gia Lai\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/suppliers",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"suppliers"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Suppliers_POST phoneNumber required",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"     additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('Phone number is required');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Han\",\r\n    \"address\": \"Duc Pho\",\r\n    \"email\": \"han@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/suppliers",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"suppliers"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Suppliers_POST phoneNumber duplicate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"     additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('Phone number must be unique');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Han\",\r\n    \"phoneNumber\": \"0901987654\",\r\n    \"address\": \"Duc Pho\",\r\n    \"email\": \"hannn@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/suppliers",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"suppliers"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Suppliers_POST phoneNumber length less than 50",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"     additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('Phone number must be less than or equal to 50 characters');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Pha\",\r\n    \"phoneNumber\": \"09019876540901987654090198765409019876540901987654123\",\r\n    \"address\": \"Duc Pho\",\r\n    \"email\": \"pha@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/suppliers",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"suppliers"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Suppliers_POST phoneNumber greater than 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"     additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('Phone number shound not be empty');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Pha\",\r\n    \"phoneNumber\": \"\",\r\n    \"address\": \"Duc Pho\",\r\n    \"email\": \"pha@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/suppliers",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"suppliers"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Suppliers_POST address required",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"     additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('Address is required');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Ngan\",\r\n    \"phoneNumber\": \"0901987012\",\r\n    \"email\": \"ngan@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/suppliers",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"suppliers"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Suppliers_POST  address length greater than 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"     additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('Address shound not be empty');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Ngan\",\r\n    \"phoneNumber\": \"0901987012\",\r\n    \"address\": \"\",\r\n    \"email\": \"ngan12@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/suppliers",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"suppliers"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Suppliers_POST email required",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"     additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('Email is required');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Hien\",\r\n    \"phoneNumber\": \"0901987659\",\r\n    \"address\": \"Nghe An\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/suppliers",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"suppliers"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Suppliers_POST email duplicate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"     additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('Email must be unique');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Hằng\",\r\n    \"phoneNumber\": \"0901987600\",\r\n    \"address\": \"Da Nang\",\r\n    \"email\": \"lexlieu@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/suppliers",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"suppliers"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Suppliers_POST email length less than 50",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"     additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('Email must be greater than 1 and less than or equal 50 characters');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Ngan\",\r\n    \"lastName\": \"Nguyen\",\r\n    \"phoneNumber\": \"0901987012\",\r\n    \"address\": \"Da Nang\",\r\n    \"birthday\": \"2003/08/15\",\r\n    \"email\": \"ngannganngannganngannganngannganngannganngannganngan12@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/employees",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"employees"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Suppliers_POST email length greater than 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"     additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('Email shound not be empty');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Ngan\",\r\n    \"phoneNumber\": \"0901987012\",\r\n    \"address\": \"Da Nang\",\r\n    \"email\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/suppliers",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"suppliers"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Suppliers_POST email format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"     additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('Email shound be an email');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Ngan\",\r\n    \"phoneNumber\": \"0901987012\",\r\n    \"address\": \"Da Nang\",\r\n    \"email\": \"ngan12@mail\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/suppliers",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"suppliers"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PATCH",
							"item": [
								{
									"name": "TC_Suppliers_PATCH BY ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 200', function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      id: { type: 'number' },\r",
													"      name: { type: 'string' },\r",
													"      description: { type: ['string', 'null'] },\r",
													"        id: { type: 'number' },\r",
													"        name: { type: 'string' },\r",
													"        phoneNumber: {type: 'string'},\r",
													"        email: {type: 'string'},\r",
													"        address: {type: 'string'}\r",
													"    },\r",
													"    required: ['id', 'name', 'phoneNumber','email','address'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\": \"Ho Chi Minh\",\r\n    \"email\": \"jungkook@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/suppliers/13",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"suppliers",
												"13"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Suppliers_PATCH BY ID Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"     additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('Validation failed (numeric string is expected)');\r",
													"  pm.expect(json.error).to.equal('Invalid route params');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Yen\",\r\n    \"phoneNumber\": \"0902102104\",\r\n    \"address\": \"Ho Chi Minh\",\r\n    \"email\": \"yen@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/suppliers/1abc",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"suppliers",
												"1abc"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Suppliers_PATCH BY ID not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 410', function () {\r",
													"  pm.response.to.have.status(410);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"     additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(410);\r",
													"  pm.expect(json.message).to.include('Supplier not found');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Anh\",\r\n    \"phoneNumber\": \"0902102123\",\r\n    \"email\": \"kimanh@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/suppliers/12345",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"suppliers",
												"12345"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Suppliers_PATCH phoneNumber duplicate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"     additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('Phone number must be unique');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"phoneNumber\": \"0901987600\",\r\n    \"address\": \"Ho Chi Minh\",\r\n    \"birthday\": \"1999/19/11\",\r\n    \"email\": \"thihien@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/suppliers/14",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"suppliers",
												"14"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Suppliers_PATCH email duplicate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"     additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('Email must be unique');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"phoneNumber\": \"0902102104\",\r\n    \"address\": \"Ho Chi Minh\",\r\n    \"birthday\": \"1976/09/01\",\r\n    \"email\": \"ngan12@mail\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/suppliers/17",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"suppliers",
												"17"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "DELETE",
							"item": [
								{
									"name": "TC_Suppliers_DELETE BY ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 200', function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      message: { type: 'string' },\r",
													"    },\r",
													"    required: ['message'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.message).to.eql('Supplier deleted');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/suppliers/38",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"suppliers",
												"38"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Suppliers_DELETE BY ID not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 410', function () {\r",
													"  pm.response.to.have.status(410);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],  \r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.statusCode).to.eql(410);\r",
													"  pm.expect(jsonData.message).to.include('Supplier not found');\r",
													"  pm.expect(jsonData.error).to.eql('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://server.aptech.io/online-shop/suppliers/1234",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"suppliers",
												"1234"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Suppliers_DELETE BY ID Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.statusCode).to.eql(400);\r",
													"  pm.expect(jsonData.message).to.include('Validation failed (numeric string is expected)');\r",
													"  pm.expect(jsonData.error).to.eql('Invalid route params');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyMTk1NDgzLCJleHAiOjE3NjM3NTMwODN9.8qsQ3qAXJz7t4cP7l3buqMRQLbpt4rJ_dhpNhcKByGc",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://server.aptech.io/online-shop/suppliers/1abc",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"suppliers",
												"1abc"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Products",
					"item": [
						{
							"name": "GET",
							"item": [
								{
									"name": "TC_Products_GET ALL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 200', function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be an array', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('array');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: \"array\",\r",
													"    items: {\r",
													"        type: \"object\",\r",
													"        properties: {\r",
													"            id: { type: \"number\" },\r",
													"            name: { type: \"string\" },\r",
													"            price: { type: \"number\" },\r",
													"            discount: { type: \"number\" },\r",
													"            stock: { type: \"number\" },\r",
													"            description: { type: [\"string\",\"null\"] },\r",
													"            categoryId: { type: \"number\" },\r",
													"            supplierId: { type: \"number\" },\r",
													"            category: {\r",
													"                type: \"object\",\r",
													"                properties: {\r",
													"                    id: { type: \"number\" },\r",
													"                    name: { type: \"string\" },\r",
													"                    description: { type: [\"string\",\"null\"] }\r",
													"                },\r",
													"                required: [\"id\", \"name\", \"description\"]\r",
													"            },\r",
													"            supplier: {\r",
													"                type: \"object\",\r",
													"                properties: {\r",
													"                    id: { type: \"number\" },\r",
													"                    name: { type: \"string\" },\r",
													"                    phoneNumber: { type: \"string\" },\r",
													"                    email: { type: [\"string\", \"null\"] },\r",
													"                    address: { type: \"string\" }\r",
													"                },\r",
													"                required: [\"id\", \"name\", \"phoneNumber\", \"address\"]\r",
													"            }\r",
													"        },\r",
													"        required: [\"id\", \"name\", \"price\", \"discount\", \"stock\", \"description\", \"categoryId\", \"supplierId\", \"category\", \"supplier\"],\r",
													"        additionalProperties: false\r",
													"    }\r",
													"    };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://server.aptech.io/online-shop/products",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"products"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Products_GET BY ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 200', function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be an object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: \"object\",\r",
													"    properties: {\r",
													"        id: { type: \"number\" },\r",
													"        name: { type: \"string\" },\r",
													"        price: { type: \"number\" },\r",
													"        discount: { type: \"number\" },\r",
													"        stock: { type: \"number\" },\r",
													"        description: { type: [\"string\",\"null\"] },\r",
													"        categoryId: { type: \"number\" },\r",
													"        supplierId: { type: \"number\" },\r",
													"        category: {\r",
													"            type: \"object\",\r",
													"            properties: {\r",
													"                id: { type: \"number\" },\r",
													"                name: { type: \"string\" },\r",
													"                description: { type: [\"string\",\"null\"] }\r",
													"            },\r",
													"            required: [\"id\", \"name\", \"description\"]\r",
													"        },\r",
													"        supplier: {\r",
													"            type: \"object\",\r",
													"            properties: {\r",
													"                id: { type: \"number\" },\r",
													"                name: { type: \"string\" },\r",
													"                phoneNumber: { type: \"string\" },\r",
													"                email: { type: [\"string\", \"null\"] },\r",
													"                address: { type: \"string\" }\r",
													"            },\r",
													"            required: [\"id\", \"name\", \"phoneNumber\", \"address\"]\r",
													"        }\r",
													"    },\r",
													"    required: [\"id\", \"name\", \"price\", \"discount\", \"stock\", \"description\", \"categoryId\", \"supplierId\", \"category\", \"supplier\"],\r",
													"    additionalProperties: false\r",
													"    };\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://server.aptech.io/online-shop/products/17",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"products",
												"17"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Products_GET BY ID Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.statusCode).to.eql(400);\r",
													"  pm.expect(jsonData.message).to.include('Validation failed (numeric string is expected)');\r",
													"  pm.expect(jsonData.error).to.eql('Invalid route params');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://server.aptech.io/online-shop/products/1abc",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"products",
												"1abc"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Products_GET BY ID not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 410', function () {\r",
													"  pm.response.to.have.status(410);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(410);\r",
													"  pm.expect(json.message).to.include('Product not found');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://server.aptech.io/online-shop/products/1234",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"products",
												"1234"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "POST",
							"item": [
								{
									"name": "TC_Products_POST",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 201', function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: \"object\",\r",
													"    properties: {\r",
													"        id: { type: \"number\" },\r",
													"        name: { type: \"string\" },\r",
													"        price: { type: \"number\" },\r",
													"        discount: { type: \"number\" },\r",
													"        stock: { type: \"number\" },\r",
													"        description: { type: [\"string\",\"null\"] },\r",
													"        categoryId: { type: ['string','number'] },\r",
													"        supplierId: { type: ['string','number'] },\r",
													"    },\r",
													"    required: [\"id\", \"name\", \"price\", \"discount\", \"stock\", \"description\", \"categoryId\", \"supplierId\"],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"áo thun\",\r\n    \"price\": 50,\r\n    \"discount\": 0,\r\n    \"stock\": 100,\r\n    \"categoryId\": \"23\",\r\n    \"supplierId\": \"5\",\r\n    \"description\": \"áo thin co giãn tốt\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/products",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"products"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Products_POST name required",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('Name is required');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"price\": 50,\r\n    \"discount\": 0,\r\n    \"stock\": 100,\r\n    \"categoryId\": \"23\",\r\n    \"supplierId\": \"5\",\r\n    \"description\": \"áo thin co giãn tốt\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/products",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"products"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Products_POST name length less than 100",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('Name must be greater than 1 and less than or equal 100 characters');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"áo thunáo thunáo thunáo thunáo thunáo thunáo thunáo thunáo thunáo thunáo thunáo thunáo thunáo thunáo thun\",\r\n    \"price\": 50,\r\n    \"discount\": 0,\r\n    \"stock\": 100,\r\n    \"categoryId\": \"23\",\r\n    \"supplierId\": \"5\",\r\n    \"description\": \"áo thin co giãn tốt\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/products",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"products"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Products_POST name length greated than 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('Name must be greater than 1 and less than or equal 100 characters');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"\",\r\n    \"price\": 50,\r\n    \"discount\": 0,\r\n    \"stock\": 100,\r\n    \"categoryId\": \"23\",\r\n    \"supplierId\": \"5\",\r\n    \"description\": \"áo thin co giãn tốt\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/products",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"products"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Products_POST price required",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('Price is required');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"áo nỉ\",\r\n    \"discount\": 0,\r\n    \"stock\": 100,\r\n    \"categoryId\": \"23\",\r\n    \"supplierId\": \"5\",\r\n    \"description\": \"áo vải nỉ\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/products",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"products"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Products_POST price greater than 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('Price must be greater than 0');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"áo nỉ\",\r\n    \"price\": 0,\r\n    \"discount\": 0,\r\n    \"stock\": 100,\r\n    \"categoryId\": \"23\",\r\n    \"supplierId\": \"5\",\r\n    \"description\": \"áo vải nỉ\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/products",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"products"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Products_POST discount required",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 201', function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: \"object\",\r",
													"    properties: {\r",
													"        id: { type: \"number\" },\r",
													"        name: { type: \"string\" },\r",
													"        price: { type: \"number\" },\r",
													"        discount: { type: \"number\" },\r",
													"        stock: { type: \"number\" },\r",
													"        description: { type: [\"string\",\"null\"] },\r",
													"        categoryId: { type: ['string','number'] },\r",
													"        supplierId: { type: ['string','number'] },\r",
													"    },\r",
													"    required: [\"id\", \"name\", \"price\", \"discount\", \"stock\", \"description\", \"categoryId\", \"supplierId\"],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"áo nỉ\",\r\n    \"price\": 400,\r\n    \"stock\": 100,\r\n    \"categoryId\": \"23\",\r\n    \"supplierId\": \"5\",\r\n    \"description\": \"áo vải nỉ\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/products",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"products"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Products_POST discount greater than or equal to 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('Discount must be greater than or equal to 0');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"áo nỉ\",\r\n    \"price\": 400,\r\n    \"discount\": -1,\r\n    \"stock\": 100,\r\n    \"categoryId\": \"23\",\r\n    \"supplierId\": \"5\",\r\n    \"description\": \"áo vải nỉ\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/products",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"products"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Products_POST discount less than 90",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('Discount must be less than or equal to 90');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"áo nỉ\",\r\n    \"price\": 400,\r\n    \"discount\": 91,\r\n    \"stock\": 100,\r\n    \"categoryId\": \"23\",\r\n    \"supplierId\": \"5\",\r\n    \"description\": \"áo vải nỉ\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/products",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"products"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Products_POST stock required",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 201', function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: \"object\",\r",
													"    properties: {\r",
													"        id: { type: \"number\" },\r",
													"        name: { type: \"string\" },\r",
													"        price: { type: \"number\" },\r",
													"        discount: { type: \"number\" },\r",
													"        stock: { type: \"number\" },\r",
													"        description: { type: [\"string\",\"null\"] },\r",
													"        categoryId: { type: ['string','number'] },\r",
													"        supplierId: { type: ['string','number'] },\r",
													"    },\r",
													"    required: [\"id\", \"name\", \"price\", \"discount\", \"stock\", \"description\", \"categoryId\", \"supplierId\"],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"áo nỉ\",\r\n    \"price\": 400,\r\n    \"discount\": 70,\r\n    \"categoryId\": \"23\",\r\n    \"supplierId\": \"5\",\r\n    \"description\": \"áo vải nỉ\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/products",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"products"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Products_POST stock greater than or equal to 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('Stock must be greater than or equal 0');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"áo nỉ\",\r\n    \"price\": 400,\r\n    \"discount\": 70,\r\n    \"stock\": -1,\r\n    \"categoryId\": \"23\",\r\n    \"supplierId\": \"5\",\r\n    \"description\": \"áo vải nỉ\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/products",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"products"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Products_POST description null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 201', function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: \"object\",\r",
													"    properties: {\r",
													"        id: { type: \"number\" },\r",
													"        name: { type: \"string\" },\r",
													"        price: { type: \"number\" },\r",
													"        discount: { type: \"number\" },\r",
													"        stock: { type: \"number\" },\r",
													"        description: { type: [\"string\",\"null\"] },\r",
													"        categoryId: { type: ['string','number'] },\r",
													"        supplierId: { type: ['string','number'] },\r",
													"    },\r",
													"    required: [\"id\", \"name\", \"price\", \"discount\", \"stock\", \"description\", \"categoryId\", \"supplierId\"],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"áo nỉ\",\r\n    \"price\": 400,\r\n    \"discount\": 70,\r\n    \"stock\": 200,\r\n    \"categoryId\": \"23\",\r\n    \"supplierId\": \"5\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/products",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"products"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Products_POST categoryId required",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('categoryId is required');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"áo nỉ\",\r\n    \"price\": 400,\r\n    \"discount\": 70,\r\n    \"stock\": 200,\r\n    \"supplierId\": \"5\",\r\n    \"description\": \"áo tốt\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/products",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"products"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Products_POST categoryId foreign key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('categoryId is a foreign key');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"áo nỉ\",\r\n    \"price\": 400,\r\n    \"discount\": 70,\r\n    \"stock\": 200,\r\n    \"categoryId\": \"10\",\r\n    \"supplierId\": \"5\",\r\n    \"description\": \"áo tốt\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/products",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"products"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Products_POST supplierId required",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('supplierId is required');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"áo nỉ\",\r\n    \"price\": 400,\r\n    \"discount\": 70,\r\n    \"stock\": 200,\r\n    \"categoryId\": \"23\",\r\n    \"description\": \"áo tốt\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/products",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"products"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Products_POST supplierId foreign key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('supplierId is a foreign key');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"áo nỉ\",\r\n    \"price\": 400,\r\n    \"discount\": 70,\r\n    \"stock\": 200,\r\n    \"categoryId\": \"23\",\r\n    \"supplierId\": \"7\",\r\n    \"description\": \"áo tốt\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/products",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"products"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PATCH",
							"item": [
								{
									"name": "TC_Products_PATCH BY ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 200', function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: \"object\",\r",
													"    properties: {\r",
													"        id: { type: \"number\" },\r",
													"        name: { type: \"string\" },\r",
													"        price: { type: \"number\" },\r",
													"        discount: { type: \"number\" },\r",
													"        stock: { type: \"number\" },\r",
													"        description: { type: [\"string\",\"null\"] },\r",
													"        categoryId: { type: ['string','number'] },\r",
													"        supplierId: { type: ['string','number'] },\r",
													"    },\r",
													"    required: [\"id\", \"name\", \"price\", \"discount\", \"stock\", \"description\", \"categoryId\", \"supplierId\"],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"trà sữa truyền thống\",\r\n    \"categoryId\": \"15\",\r\n    \"supplierId\": \"1\",\r\n    \"description\": \"fulltoping\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/products/8",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"products",
												"8"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Products_PATCH BY ID Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('Validation failed (numeric string is expected)');\r",
													"  pm.expect(json.error).to.equal('Invalid route params');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"trà sữa truyền thống\",\r\n    \"categoryId\": \"15\",\r\n    \"supplierId\": \"1\",\r\n    \"description\": \"fulltoping\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/products/1abc",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"products",
												"1abc"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Products_PATCH BY ID not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 410', function () {\r",
													"  pm.response.to.have.status(410);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(410);\r",
													"  pm.expect(json.message).to.include('Product not found');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"trà sữa truyền thống\",\r\n    \"categoryId\": \"15\",\r\n    \"supplierId\": \"1\",\r\n    \"description\": \"fulltoping\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/products/12345",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"products",
												"12345"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Products_PATCH BY ID price greater than 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.eql(400);\r",
													"  pm.expect(json.message).to.include('Price must be greater than 0');\r",
													"  pm.expect(json.error).to.eql('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"price\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/products/4",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"products",
												"4"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Products_PATCH BY ID discount less than or equal to 90",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('Discount must be less than or equal to 90');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"discount\": 95\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/products/4",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"products",
												"4"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Products_PATCH BY ID discount greater than or equal to 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('Discount must be greater than or equal to 0');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"discount\": -5\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/products/4",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"products",
												"4"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Products_PATCH BY ID stock greater than and equal to 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('Stock must be greater than or equal 0');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"stock\": -5\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/products/4",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"products",
												"4"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Products_PATCH BY ID categoryId foreign key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('categoryId is a foreign key');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"categoryId\": \"10\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/products/4",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"products",
												"4"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Products_PATCH BY ID supplierId foreign key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('supplierId is a foreign key');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"supplierId\": \"9\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/products/4",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"products",
												"4"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "DELETE",
							"item": [
								{
									"name": "TC_Products_DELETE BY ID product with orders",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.statusCode).to.eql(400);\r",
													"  pm.expect(jsonData.message).to.include('Cannot delete product with orders');\r",
													"  pm.expect(jsonData.error).to.eql('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://server.aptech.io/online-shop/products/7",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"products",
												"7"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Products_DELETE BY ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 200', function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      message: { type: 'string' },\r",
													"    },\r",
													"    required: ['message'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.message).to.eql('Product deleted');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://server.aptech.io/online-shop/products/9",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"products",
												"9"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Products_DELETE BY ID Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.statusCode).to.eql(400);\r",
													"  pm.expect(jsonData.message).to.include('Validation failed (numeric string is expected)');\r",
													"  pm.expect(jsonData.error).to.eql('Invalid route params');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://server.aptech.io/online-shop/products/1abc",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"products",
												"1abc"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Products_DELETE BY ID not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 410', function () {\r",
													"  pm.response.to.have.status(410);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],  \r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.statusCode).to.eql(410);\r",
													"  pm.expect(jsonData.message).to.include('Product not found');\r",
													"  pm.expect(jsonData.error).to.eql('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://server.aptech.io/online-shop/products/12345",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"products",
												"12345"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Orders",
					"item": [
						{
							"name": "GET",
							"item": [
								{
									"name": "TC_Orders_GET ALL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 200', function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be an array', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('array');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'array',\r",
													"    items: {\r",
													"      type: 'object',\r",
													"      properties: {\r",
													"        id: { type: 'number' },\r",
													"        createdDate: {type: 'string'},\r",
													"        shippedDate: {type: ['string','null']},\r",
													"        status: {type: 'string'},\r",
													"        description: { type: ['string', 'null'] },\r",
													"        shippingAddress: {type: 'string'},\r",
													"        shippingCity: {type: 'string'},\r",
													"        paymentType: {type: 'string'},\r",
													"        customerId: {type: ['string','number']},\r",
													"        employeeId: {type: ['string','number']},\r",
													"        customer: {\r",
													"            type: 'object',\r",
													"            properties: {\r",
													"                id: {type: 'number'},\r",
													"                firstName: {type: 'string'},\r",
													"                lastName: {type: 'string'},\r",
													"                phoneNumber: {type: 'string'},\r",
													"                address: {type: 'string'},\r",
													"                email: {type: 'string'},\r",
													"                birthday: {type: ['string','null']},\r",
													"            },\r",
													"            required: ['id','firstName','lastName','phoneNumber','address','email','birthday'],\r",
													"            additionalProperties: false,\r",
													"        },\r",
													"        employee: {\r",
													"            type: 'object',\r",
													"            properties: {\r",
													"                id: {type: 'number'},\r",
													"                firstName: {type: 'string'},\r",
													"                lastName: {type: 'string'},\r",
													"                phoneNumber: {type: 'string'},\r",
													"                address: {type: 'string'},\r",
													"                email: {type: 'string'},\r",
													"                birthday: {type: ['string','null']},\r",
													"            },\r",
													"            required: ['id','firstName','lastName','phoneNumber','address','email','birthday'],\r",
													"            additionalProperties: false,\r",
													"        },\r",
													"        orderDetails : {\r",
													"            type: 'array',\r",
													"            items: {\r",
													"                type: 'object',\r",
													"                properties: {\r",
													"                    quantity: {type: 'number'},\r",
													"                    price: {type: 'number'},\r",
													"                    discount: {type: 'number'},\r",
													"                    product: {\r",
													"                        type: 'object',\r",
													"                        properties: {\r",
													"                            id: { type: \"number\" },\r",
													"                            name: { type: \"string\" },\r",
													"                            price: { type: \"number\" },\r",
													"                            discount: { type: \"number\" },\r",
													"                            stock: { type: \"number\" },\r",
													"                            description: { type: [\"string\",\"null\"] },\r",
													"                            categoryId: { type: \"number\" },\r",
													"                            supplierId: { type: \"number\" },\r",
													"                            category: {\r",
													"                                type: \"object\",\r",
													"                                properties: {\r",
													"                                    id: { type: \"number\" },\r",
													"                                    name: { type: \"string\" },\r",
													"                                    description: { type: [\"string\",\"null\"] }\r",
													"                                },\r",
													"                                required: [\"id\", \"name\", \"description\"]\r",
													"                            },\r",
													"                            supplier: {\r",
													"                                type: \"object\",\r",
													"                                properties: {\r",
													"                                    id: { type: \"number\" },\r",
													"                                    name: { type: \"string\" },\r",
													"                                    phoneNumber: { type: \"string\" },\r",
													"                                    email: { type: [\"string\", \"null\"] },\r",
													"                                    address: { type: \"string\" }\r",
													"                                },\r",
													"                                required: [\"id\", \"name\", \"phoneNumber\", \"address\"],\r",
													"                                additionalProperties: false,\r",
													"                            },\r",
													"                        },\r",
													"                        required: [\"id\", \"name\", \"price\", \"stock\", \"categoryId\", \"supplierId\"],\r",
													"                        additionalProperties: false,\r",
													"                    },\r",
													"                },\r",
													"                required: [\"quantity\", \"price\", \"discount\", \"product\"],\r",
													"                additionalProperties: false,\r",
													"            },\r",
													"        },  \r",
													"      },\r",
													"      required: [\"id\", \"createdDate\", \"status\", \"shippingAddress\", \"shippingCity\", \"paymentType\", \"customerId\", \"employeeId\", \"customer\", \"employee\", \"orderDetails\"],\r",
													"      additionalProperties: false\r",
													"    },\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://server.aptech.io/online-shop/orders",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Orders_GET BY ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 200', function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be an object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"      type: 'object',\r",
													"      properties: {\r",
													"        id: { type: 'number' },\r",
													"        createdDate: {type: 'string'},\r",
													"        shippedDate: {type: ['string','null']},\r",
													"        status: {type: 'string'},\r",
													"        description: { type: ['string', 'null'] },\r",
													"        shippingAddress: {type: 'string'},\r",
													"        shippingCity: {type: 'string'},\r",
													"        paymentType: {type: 'string'},\r",
													"        customerId: {type: ['string','number']},\r",
													"        employeeId: {type: ['string','number']},\r",
													"        customer: {\r",
													"            type: 'object',\r",
													"            properties: {\r",
													"                id: {type: 'number'},\r",
													"                firstName: {type: 'string'},\r",
													"                lastName: {type: 'string'},\r",
													"                phoneNumber: {type: 'string'},\r",
													"                address: {type: 'string'},\r",
													"                email: {type: 'string'},\r",
													"                birthday: {type: ['string','null']},\r",
													"            },\r",
													"            required: ['id','firstName','lastName','phoneNumber','address','email','birthday'],\r",
													"            additionalProperties: false,\r",
													"        },\r",
													"        employee: {\r",
													"            type: 'object',\r",
													"            properties: {\r",
													"                id: {type: 'number'},\r",
													"                firstName: {type: 'string'},\r",
													"                lastName: {type: 'string'},\r",
													"                phoneNumber: {type: 'string'},\r",
													"                address: {type: 'string'},\r",
													"                email: {type: 'string'},\r",
													"                birthday: {type: ['string','null']},\r",
													"            },\r",
													"            required: ['id','firstName','lastName','phoneNumber','address','email','birthday'],\r",
													"            additionalProperties: false,\r",
													"        },\r",
													"        orderDetails : {\r",
													"            type: 'array',\r",
													"            items: {\r",
													"                type: 'object',\r",
													"                properties: {\r",
													"                    quantity: {type: 'number'},\r",
													"                    price: {type: 'number'},\r",
													"                    discount: {type: 'number'},\r",
													"                    product: {\r",
													"                        type: 'object',\r",
													"                        properties: {\r",
													"                            id: { type: \"number\" },\r",
													"                            name: { type: \"string\" },\r",
													"                            price: { type: \"number\" },\r",
													"                            discount: { type: \"number\" },\r",
													"                            stock: { type: \"number\" },\r",
													"                            description: { type: [\"string\",\"null\"] },\r",
													"                            categoryId: { type: \"number\" },\r",
													"                            supplierId: { type: \"number\" },\r",
													"                            category: {\r",
													"                                type: \"object\",\r",
													"                                properties: {\r",
													"                                    id: { type: \"number\" },\r",
													"                                    name: { type: \"string\" },\r",
													"                                    description: { type: [\"string\",\"null\"] }\r",
													"                                },\r",
													"                                required: [\"id\", \"name\", \"description\"]\r",
													"                            },\r",
													"                            supplier: {\r",
													"                                type: \"object\",\r",
													"                                properties: {\r",
													"                                    id: { type: \"number\" },\r",
													"                                    name: { type: \"string\" },\r",
													"                                    phoneNumber: { type: \"string\" },\r",
													"                                    email: { type: [\"string\", \"null\"] },\r",
													"                                    address: { type: \"string\" }\r",
													"                                },\r",
													"                                required: [\"id\", \"name\", \"phoneNumber\", \"address\"],\r",
													"                                additionalProperties: false,\r",
													"                            },\r",
													"                        },\r",
													"                        required: [\"id\", \"name\", \"price\", \"stock\", \"categoryId\", \"supplierId\"],\r",
													"                        additionalProperties: false,\r",
													"                    },\r",
													"                },\r",
													"                required: [\"quantity\", \"price\", \"discount\", \"product\"],\r",
													"                additionalProperties: false,\r",
													"            },\r",
													"        },  \r",
													"      },\r",
													"      required: [\"id\", \"createdDate\", \"status\", \"shippingAddress\", \"shippingCity\", \"paymentType\", \"customerId\", \"employeeId\", \"customer\", \"employee\", \"orderDetails\"],\r",
													"      additionalProperties: false\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://server.aptech.io/online-shop/orders/5",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"orders",
												"5"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Orders_GET BY ID Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.statusCode).to.eql(400);\r",
													"  pm.expect(jsonData.message).to.include('Validation failed (numeric string is expected)');\r",
													"  pm.expect(jsonData.error).to.eql('Invalid route params');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://server.aptech.io/online-shop/orders/1abc",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"orders",
												"1abc"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Orders_GET BY ID not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 410', function () {\r",
													"  pm.response.to.have.status(410);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(410);\r",
													"  pm.expect(json.message).to.include('Order not found');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://server.aptech.io/online-shop/orders/12345",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"orders",
												"12345"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "POST",
							"item": [
								{
									"name": "TC_Orders_POST",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 201', function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be an object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"      type: 'object',\r",
													"      properties: {\r",
													"        id: { type: 'number' },\r",
													"        createdDate: {type: 'string'},\r",
													"        shippedDate: {type: ['string','null']},\r",
													"        status: {type: 'string'},\r",
													"        description: { type: ['string', 'null'] },\r",
													"        shippingAddress: {type: 'string'},\r",
													"        shippingCity: {type: 'string'},\r",
													"        paymentType: {type: 'string'},\r",
													"        customerId: {type: ['string','number']},\r",
													"        employeeId: {type: ['string','number']},\r",
													"        customer: {\r",
													"            type: 'object',\r",
													"            properties: {\r",
													"                id: {type: 'number'},\r",
													"                firstName: {type: 'string'},\r",
													"                lastName: {type: 'string'},\r",
													"                phoneNumber: {type: 'string'},\r",
													"                address: {type: 'string'},\r",
													"                email: {type: 'string'},\r",
													"                birthday: {type: ['string','null']},\r",
													"            },\r",
													"            required: ['id','firstName','lastName','phoneNumber','address','email','birthday'],\r",
													"            additionalProperties: false,\r",
													"        },\r",
													"        employee: {\r",
													"            type: 'object',\r",
													"            properties: {\r",
													"                id: {type: 'number'},\r",
													"                firstName: {type: 'string'},\r",
													"                lastName: {type: 'string'},\r",
													"                phoneNumber: {type: 'string'},\r",
													"                address: {type: 'string'},\r",
													"                email: {type: 'string'},\r",
													"                birthday: {type: ['string','null']},\r",
													"            },\r",
													"            required: ['id','firstName','lastName','phoneNumber','address','email','birthday'],\r",
													"            additionalProperties: false,\r",
													"        },\r",
													"        orderDetails : {\r",
													"            type: 'array',\r",
													"            items: {\r",
													"                type: 'object',\r",
													"                properties: {\r",
													"                    quantity: {type: 'number'},\r",
													"                    price: {type: 'number'},\r",
													"                    discount: {type: 'number'},\r",
													"                    product: {\r",
													"                        type: 'object',\r",
													"                        properties: {\r",
													"                            id: { type: \"number\" },\r",
													"                            name: { type: \"string\" },\r",
													"                            price: { type: \"number\" },\r",
													"                            discount: { type: \"number\" },\r",
													"                            stock: { type: \"number\" },\r",
													"                            description: { type: [\"string\",\"null\"] },\r",
													"                            categoryId: { type: \"number\" },\r",
													"                            supplierId: { type: \"number\" },\r",
													"                            category: {\r",
													"                                type: \"object\",\r",
													"                                properties: {\r",
													"                                    id: { type: \"number\" },\r",
													"                                    name: { type: \"string\" },\r",
													"                                    description: { type: [\"string\",\"null\"] }\r",
													"                                },\r",
													"                                required: [\"id\", \"name\", \"description\"]\r",
													"                            },\r",
													"                            supplier: {\r",
													"                                type: \"object\",\r",
													"                                properties: {\r",
													"                                    id: { type: \"number\" },\r",
													"                                    name: { type: \"string\" },\r",
													"                                    phoneNumber: { type: \"string\" },\r",
													"                                    email: { type: [\"string\", \"null\"] },\r",
													"                                    address: { type: \"string\" }\r",
													"                                },\r",
													"                                required: [\"id\", \"name\", \"phoneNumber\", \"address\"],\r",
													"                                additionalProperties: false,\r",
													"                            },\r",
													"                        },\r",
													"                        required: [\"id\", \"name\", \"price\", \"stock\", \"categoryId\", \"supplierId\"],\r",
													"                        additionalProperties: false,\r",
													"                    },\r",
													"                },\r",
													"                required: [\"quantity\", \"price\", \"discount\", \"product\"],\r",
													"                additionalProperties: false,\r",
													"            },\r",
													"        },  \r",
													"      },\r",
													"      required: [\"id\", \"createdDate\", \"status\", \"shippingAddress\", \"shippingCity\", \"paymentType\", \"customerId\", \"employeeId\", \"customer\", \"employee\", \"orderDetails\"],\r",
													"      additionalProperties: false\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdDate\": \"2017-04-30T17:00:00.000Z\",\r\n  \"shippedDate\": \"2017-05-03T17:00:00.000Z\",\r\n  \"status\": \"WAITING\",\r\n  \"description\": \"string\",\r\n  \"shippingAddress\": \"123 Street, London\",\r\n  \"shippingCity\": \"London\",\r\n  \"paymentType\": \"CASH\",\r\n  \"customerId\": 1,\r\n  \"employeeId\": 1,\r\n  \"orderDetails\": [\r\n    {\r\n      \"productId\": 2,\r\n      \"quantity\": 1,\r\n      \"price\": 250\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/orders",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Orders_POST createdDate required",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 201', function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"      properties: {\r",
													"        id: { type: 'number' },\r",
													"        createdDate: {type: 'string'},\r",
													"        shippedDate: {type: ['string','null']},\r",
													"        status: {type: 'string'},\r",
													"        description: { type: ['string', 'null'] },\r",
													"        shippingAddress: {type: 'string'},\r",
													"        shippingCity: {type: 'string'},\r",
													"        paymentType: {type: 'string'},\r",
													"        customerId: {type: ['string','number']},\r",
													"        employeeId: {type: ['string','number']},\r",
													"        customer: {\r",
													"            type: 'object',\r",
													"            properties: {\r",
													"                id: {type: 'number'},\r",
													"                firstName: {type: 'string'},\r",
													"                lastName: {type: 'string'},\r",
													"                phoneNumber: {type: 'string'},\r",
													"                address: {type: 'string'},\r",
													"                email: {type: 'string'},\r",
													"                birthday: {type: ['string','null']},\r",
													"            },\r",
													"            required: ['id','firstName','lastName','phoneNumber','address','email','birthday'],\r",
													"            additionalProperties: false,\r",
													"        },\r",
													"        employee: {\r",
													"            type: 'object',\r",
													"            properties: {\r",
													"                id: {type: 'number'},\r",
													"                firstName: {type: 'string'},\r",
													"                lastName: {type: 'string'},\r",
													"                phoneNumber: {type: 'string'},\r",
													"                address: {type: 'string'},\r",
													"                email: {type: 'string'},\r",
													"                birthday: {type: ['string','null']},\r",
													"            },\r",
													"            required: ['id','firstName','lastName','phoneNumber','address','email','birthday'],\r",
													"            additionalProperties: false,\r",
													"        },\r",
													"        orderDetails : {\r",
													"            type: 'array',\r",
													"            items: {\r",
													"                type: 'object',\r",
													"                properties: {\r",
													"                    quantity: {type: 'number'},\r",
													"                    price: {type: 'number'},\r",
													"                    discount: {type: 'number'},\r",
													"                    product: {\r",
													"                        type: 'object',\r",
													"                        properties: {\r",
													"                            id: { type: \"number\" },\r",
													"                            name: { type: \"string\" },\r",
													"                            price: { type: \"number\" },\r",
													"                            discount: { type: \"number\" },\r",
													"                            stock: { type: \"number\" },\r",
													"                            description: { type: [\"string\",\"null\"] },\r",
													"                            categoryId: { type: \"number\" },\r",
													"                            supplierId: { type: \"number\" },\r",
													"                            category: {\r",
													"                                type: \"object\",\r",
													"                                properties: {\r",
													"                                    id: { type: \"number\" },\r",
													"                                    name: { type: \"string\" },\r",
													"                                    description: { type: [\"string\",\"null\"] }\r",
													"                                },\r",
													"                                required: [\"id\", \"name\", \"description\"]\r",
													"                            },\r",
													"                            supplier: {\r",
													"                                type: \"object\",\r",
													"                                properties: {\r",
													"                                    id: { type: \"number\" },\r",
													"                                    name: { type: \"string\" },\r",
													"                                    phoneNumber: { type: \"string\" },\r",
													"                                    email: { type: [\"string\", \"null\"] },\r",
													"                                    address: { type: \"string\" }\r",
													"                                },\r",
													"                                required: [\"id\", \"name\", \"phoneNumber\", \"address\"],\r",
													"                                additionalProperties: false,\r",
													"                            },\r",
													"                        },\r",
													"                        required: [\"id\", \"name\", \"price\", \"stock\", \"categoryId\", \"supplierId\"],\r",
													"                        additionalProperties: false,\r",
													"                    },\r",
													"                },\r",
													"                required: [\"quantity\", \"price\", \"discount\", \"product\"],\r",
													"                additionalProperties: false,\r",
													"            },\r",
													"        },  \r",
													"      },\r",
													"      required: [\"id\", \"createdDate\", \"status\", \"shippingAddress\", \"shippingCity\", \"paymentType\", \"customerId\", \"employeeId\", \"customer\", \"employee\", \"orderDetails\"],\r",
													"      additionalProperties: false\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"status\": \"WAITING\",\r\n  \"description\": \"string\",\r\n  \"shippingAddress\": \"123 Street, London\",\r\n  \"shippingCity\": \"London\",\r\n  \"paymentType\": \"CASH\",\r\n  \"customerId\": 1,\r\n  \"employeeId\": 1,\r\n  \"orderDetails\": [\r\n    {\r\n      \"productId\": 2,\r\n      \"quantity\": 1,\r\n      \"price\": 250\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/orders",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Orders_POST createdDate format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"     additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('createdDate must be a Datetime');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdDate\": \"2025130\",\r\n  \"status\": \"WAITING\",\r\n  \"description\": \"string\",\r\n  \"shippingAddress\": \"123 Street, London\",\r\n  \"shippingCity\": \"London\",\r\n  \"paymentType\": \"CASH\",\r\n  \"customerId\": 1,\r\n  \"employeeId\": 1,\r\n  \"orderDetails\": [\r\n    {\r\n      \"orderId\": 1,\r\n      \"productId\": 2,\r\n      \"quantity\": 1,\r\n      \"price\": 250\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/orders",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Orders_POST shippedDate null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 201', function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"      type: 'object',\r",
													"      properties: {\r",
													"        id: { type: 'number' },\r",
													"        createdDate: {type: 'string'},\r",
													"        shippedDate: {type: ['string','null']},\r",
													"        status: {type: 'string'},\r",
													"        description: { type: ['string', 'null'] },\r",
													"        shippingAddress: {type: 'string'},\r",
													"        shippingCity: {type: 'string'},\r",
													"        paymentType: {type: 'string'},\r",
													"        customerId: {type: ['string','number']},\r",
													"        employeeId: {type: ['string','number']},\r",
													"        customer: {\r",
													"            type: 'object',\r",
													"            properties: {\r",
													"                id: {type: 'number'},\r",
													"                firstName: {type: 'string'},\r",
													"                lastName: {type: 'string'},\r",
													"                phoneNumber: {type: 'string'},\r",
													"                address: {type: 'string'},\r",
													"                email: {type: 'string'},\r",
													"                birthday: {type: ['string','null']},\r",
													"            },\r",
													"            required: ['id','firstName','lastName','phoneNumber','address','email','birthday'],\r",
													"            additionalProperties: false,\r",
													"        },\r",
													"        employee: {\r",
													"            type: 'object',\r",
													"            properties: {\r",
													"                id: {type: 'number'},\r",
													"                firstName: {type: 'string'},\r",
													"                lastName: {type: 'string'},\r",
													"                phoneNumber: {type: 'string'},\r",
													"                address: {type: 'string'},\r",
													"                email: {type: 'string'},\r",
													"                birthday: {type: ['string','null']},\r",
													"            },\r",
													"            required: ['id','firstName','lastName','phoneNumber','address','email','birthday'],\r",
													"            additionalProperties: false,\r",
													"        },\r",
													"        orderDetails : {\r",
													"            type: 'array',\r",
													"            items: {\r",
													"                type: 'object',\r",
													"                properties: {\r",
													"                    quantity: {type: 'number'},\r",
													"                    price: {type: 'number'},\r",
													"                    discount: {type: 'number'},\r",
													"                    product: {\r",
													"                        type: 'object',\r",
													"                        properties: {\r",
													"                            id: { type: \"number\" },\r",
													"                            name: { type: \"string\" },\r",
													"                            price: { type: \"number\" },\r",
													"                            discount: { type: \"number\" },\r",
													"                            stock: { type: \"number\" },\r",
													"                            description: { type: [\"string\",\"null\"] },\r",
													"                            categoryId: { type: \"number\" },\r",
													"                            supplierId: { type: \"number\" },\r",
													"                            category: {\r",
													"                                type: \"object\",\r",
													"                                properties: {\r",
													"                                    id: { type: \"number\" },\r",
													"                                    name: { type: \"string\" },\r",
													"                                    description: { type: [\"string\",\"null\"] }\r",
													"                                },\r",
													"                                required: [\"id\", \"name\", \"description\"]\r",
													"                            },\r",
													"                            supplier: {\r",
													"                                type: \"object\",\r",
													"                                properties: {\r",
													"                                    id: { type: \"number\" },\r",
													"                                    name: { type: \"string\" },\r",
													"                                    phoneNumber: { type: \"string\" },\r",
													"                                    email: { type: [\"string\", \"null\"] },\r",
													"                                    address: { type: \"string\" }\r",
													"                                },\r",
													"                                required: [\"id\", \"name\", \"phoneNumber\", \"address\"],\r",
													"                                additionalProperties: false,\r",
													"                            },\r",
													"                        },\r",
													"                        required: [\"id\", \"name\", \"price\", \"stock\", \"categoryId\", \"supplierId\"],\r",
													"                        additionalProperties: false,\r",
													"                    },\r",
													"                },\r",
													"                required: [\"quantity\", \"price\", \"discount\", \"product\"],\r",
													"                additionalProperties: false,\r",
													"            },\r",
													"        },  \r",
													"      },\r",
													"      required: [\"id\", \"createdDate\", \"status\", \"shippingAddress\", \"shippingCity\", \"paymentType\", \"customerId\", \"employeeId\", \"customer\", \"employee\", \"orderDetails\"],\r",
													"      additionalProperties: false\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdDate\": \"2017-04-30T17:00:00.000Z\",\r\n  \"status\": \"WAITING\",\r\n  \"description\": \"string\",\r\n  \"shippingAddress\": \"123 Street, London\",\r\n  \"shippingCity\": \"London\",\r\n  \"paymentType\": \"CASH\",\r\n  \"customerId\": 1,\r\n  \"employeeId\": 1,\r\n  \"orderDetails\": [\r\n    {\r\n      \"orderId\": 1,\r\n      \"productId\": 2,\r\n      \"quantity\": 1,\r\n      \"price\": 250\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/orders",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Orders_POST shippedDate format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"     additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('Shipped date must be a Date');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdDate\": \"2017-04-30T17:00:00.000Z\",\r\n  \"shippedDate\": \"2046142\",\r\n  \"status\": \"WAITING\",\r\n  \"description\": \"string\",\r\n  \"shippingAddress\": \"123 Street, London\",\r\n  \"shippingCity\": \"London\",\r\n  \"paymentType\": \"CASH\",\r\n  \"customerId\": 1,\r\n  \"employeeId\": 1,\r\n  \"orderDetails\": [\r\n    {\r\n      \"orderId\": 1,\r\n      \"productId\": 2,\r\n      \"quantity\": 1,\r\n      \"price\": 250\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/orders",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Orders_POST status required",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 201', function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"      type: 'object',\r",
													"      properties: {\r",
													"        id: { type: 'number' },\r",
													"        createdDate: {type: 'string'},\r",
													"        shippedDate: {type: ['string','null']},\r",
													"        status: {type: 'string'},\r",
													"        description: { type: ['string', 'null'] },\r",
													"        shippingAddress: {type: 'string'},\r",
													"        shippingCity: {type: 'string'},\r",
													"        paymentType: {type: 'string'},\r",
													"        customerId: {type: ['string','number']},\r",
													"        employeeId: {type: ['string','number']},\r",
													"        customer: {\r",
													"            type: 'object',\r",
													"            properties: {\r",
													"                id: {type: 'number'},\r",
													"                firstName: {type: 'string'},\r",
													"                lastName: {type: 'string'},\r",
													"                phoneNumber: {type: 'string'},\r",
													"                address: {type: 'string'},\r",
													"                email: {type: 'string'},\r",
													"                birthday: {type: ['string','null']},\r",
													"            },\r",
													"            required: ['id','firstName','lastName','phoneNumber','address','email','birthday'],\r",
													"            additionalProperties: false,\r",
													"        },\r",
													"        employee: {\r",
													"            type: 'object',\r",
													"            properties: {\r",
													"                id: {type: 'number'},\r",
													"                firstName: {type: 'string'},\r",
													"                lastName: {type: 'string'},\r",
													"                phoneNumber: {type: 'string'},\r",
													"                address: {type: 'string'},\r",
													"                email: {type: 'string'},\r",
													"                birthday: {type: ['string','null']},\r",
													"            },\r",
													"            required: ['id','firstName','lastName','phoneNumber','address','email','birthday'],\r",
													"            additionalProperties: false,\r",
													"        },\r",
													"        orderDetails : {\r",
													"            type: 'array',\r",
													"            items: {\r",
													"                type: 'object',\r",
													"                properties: {\r",
													"                    quantity: {type: 'number'},\r",
													"                    price: {type: 'number'},\r",
													"                    discount: {type: 'number'},\r",
													"                    product: {\r",
													"                        type: 'object',\r",
													"                        properties: {\r",
													"                            id: { type: \"number\" },\r",
													"                            name: { type: \"string\" },\r",
													"                            price: { type: \"number\" },\r",
													"                            discount: { type: \"number\" },\r",
													"                            stock: { type: \"number\" },\r",
													"                            description: { type: [\"string\",\"null\"] },\r",
													"                            categoryId: { type: \"number\" },\r",
													"                            supplierId: { type: \"number\" },\r",
													"                            category: {\r",
													"                                type: \"object\",\r",
													"                                properties: {\r",
													"                                    id: { type: \"number\" },\r",
													"                                    name: { type: \"string\" },\r",
													"                                    description: { type: [\"string\",\"null\"] }\r",
													"                                },\r",
													"                                required: [\"id\", \"name\", \"description\"]\r",
													"                            },\r",
													"                            supplier: {\r",
													"                                type: \"object\",\r",
													"                                properties: {\r",
													"                                    id: { type: \"number\" },\r",
													"                                    name: { type: \"string\" },\r",
													"                                    phoneNumber: { type: \"string\" },\r",
													"                                    email: { type: [\"string\", \"null\"] },\r",
													"                                    address: { type: \"string\" }\r",
													"                                },\r",
													"                                required: [\"id\", \"name\", \"phoneNumber\", \"address\"],\r",
													"                                additionalProperties: false,\r",
													"                            },\r",
													"                        },\r",
													"                        required: [\"id\", \"name\", \"price\", \"stock\", \"categoryId\", \"supplierId\"],\r",
													"                        additionalProperties: false,\r",
													"                    },\r",
													"                },\r",
													"                required: [\"quantity\", \"price\", \"discount\", \"product\"],\r",
													"                additionalProperties: false,\r",
													"            },\r",
													"        },  \r",
													"      },\r",
													"      required: [\"id\", \"createdDate\", \"status\", \"shippingAddress\", \"shippingCity\", \"paymentType\", \"customerId\", \"employeeId\", \"customer\", \"employee\", \"orderDetails\"],\r",
													"      additionalProperties: false\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdDate\": \"2017-04-30T17:00:00.000Z\",\r\n  \"description\": \"string\",\r\n  \"shippingAddress\": \"123 Street, London\",\r\n  \"shippingCity\": \"London\",\r\n  \"paymentType\": \"CASH\",\r\n  \"customerId\": 1,\r\n  \"employeeId\": 1,\r\n  \"orderDetails\": [\r\n    {\r\n      \"orderId\": 1,\r\n      \"productId\": 2,\r\n      \"quantity\": 1,\r\n      \"price\": 250\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/orders",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Orders_POST description null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 201', function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"      type: 'object',\r",
													"      properties: {\r",
													"        id: { type: 'number' },\r",
													"        createdDate: {type: 'string'},\r",
													"        shippedDate: {type: ['string','null']},\r",
													"        status: {type: 'string'},\r",
													"        description: { type: ['string', 'null'] },\r",
													"        shippingAddress: {type: 'string'},\r",
													"        shippingCity: {type: 'string'},\r",
													"        paymentType: {type: 'string'},\r",
													"        customerId: {type: ['string','number']},\r",
													"        employeeId: {type: ['string','number']},\r",
													"        customer: {\r",
													"            type: 'object',\r",
													"            properties: {\r",
													"                id: {type: 'number'},\r",
													"                firstName: {type: 'string'},\r",
													"                lastName: {type: 'string'},\r",
													"                phoneNumber: {type: 'string'},\r",
													"                address: {type: 'string'},\r",
													"                email: {type: 'string'},\r",
													"                birthday: {type: ['string','null']},\r",
													"            },\r",
													"            required: ['id','firstName','lastName','phoneNumber','address','email','birthday'],\r",
													"            additionalProperties: false,\r",
													"        },\r",
													"        employee: {\r",
													"            type: 'object',\r",
													"            properties: {\r",
													"                id: {type: 'number'},\r",
													"                firstName: {type: 'string'},\r",
													"                lastName: {type: 'string'},\r",
													"                phoneNumber: {type: 'string'},\r",
													"                address: {type: 'string'},\r",
													"                email: {type: 'string'},\r",
													"                birthday: {type: ['string','null']},\r",
													"            },\r",
													"            required: ['id','firstName','lastName','phoneNumber','address','email','birthday'],\r",
													"            additionalProperties: false,\r",
													"        },\r",
													"        orderDetails : {\r",
													"            type: 'array',\r",
													"            items: {\r",
													"                type: 'object',\r",
													"                properties: {\r",
													"                    quantity: {type: 'number'},\r",
													"                    price: {type: 'number'},\r",
													"                    discount: {type: 'number'},\r",
													"                    product: {\r",
													"                        type: 'object',\r",
													"                        properties: {\r",
													"                            id: { type: \"number\" },\r",
													"                            name: { type: \"string\" },\r",
													"                            price: { type: \"number\" },\r",
													"                            discount: { type: \"number\" },\r",
													"                            stock: { type: \"number\" },\r",
													"                            description: { type: [\"string\",\"null\"] },\r",
													"                            categoryId: { type: \"number\" },\r",
													"                            supplierId: { type: \"number\" },\r",
													"                            category: {\r",
													"                                type: \"object\",\r",
													"                                properties: {\r",
													"                                    id: { type: \"number\" },\r",
													"                                    name: { type: \"string\" },\r",
													"                                    description: { type: [\"string\",\"null\"] }\r",
													"                                },\r",
													"                                required: [\"id\", \"name\", \"description\"]\r",
													"                            },\r",
													"                            supplier: {\r",
													"                                type: \"object\",\r",
													"                                properties: {\r",
													"                                    id: { type: \"number\" },\r",
													"                                    name: { type: \"string\" },\r",
													"                                    phoneNumber: { type: \"string\" },\r",
													"                                    email: { type: [\"string\", \"null\"] },\r",
													"                                    address: { type: \"string\" }\r",
													"                                },\r",
													"                                required: [\"id\", \"name\", \"phoneNumber\", \"address\"],\r",
													"                                additionalProperties: false,\r",
													"                            },\r",
													"                        },\r",
													"                        required: [\"id\", \"name\", \"price\", \"stock\", \"categoryId\", \"supplierId\"],\r",
													"                        additionalProperties: false,\r",
													"                    },\r",
													"                },\r",
													"                required: [\"quantity\", \"price\", \"discount\", \"product\"],\r",
													"                additionalProperties: false,\r",
													"            },\r",
													"        },  \r",
													"      },\r",
													"      required: [\"id\", \"createdDate\", \"status\", \"shippingAddress\", \"shippingCity\", \"paymentType\", \"customerId\", \"employeeId\", \"customer\", \"employee\", \"orderDetails\"],\r",
													"      additionalProperties: false\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdDate\": \"2017-04-30T17:00:00.000Z\",\r\n  \"status\": \"WAITING\",\r\n  \"shippingAddress\": \"123 Street, London\",\r\n  \"shippingCity\": \"London\",\r\n  \"paymentType\": \"CASH\",\r\n  \"customerId\": 1,\r\n  \"employeeId\": 1,\r\n  \"orderDetails\": [\r\n    {\r\n      \"orderId\": 1,\r\n      \"productId\": 2,\r\n      \"quantity\": 1,\r\n      \"price\": 250\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/orders",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Orders_POST shippingAddress required",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('shippingAddress is required');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdDate\": \"2017-04-30T17:00:00.000Z\",\r\n  \"status\": \"WAITING\",\r\n  \"description\": \"string\",\r\n  \"shippingCity\": \"London\",\r\n  \"paymentType\": \"CASH\",\r\n  \"customerId\": 1,\r\n  \"employeeId\": 1,\r\n  \"orderDetails\": [\r\n    {\r\n      \"orderId\": 1,\r\n      \"productId\": 2,\r\n      \"quantity\": 1,\r\n      \"price\": 250\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/orders",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Orders_POST shippingAddress length greater than 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('shippingAddress should not be empty');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdDate\": \"2017-04-30T17:00:00.000Z\",\r\n  \"status\": \"WAITING\",\r\n  \"description\": \"string\",\r\n  \"shippingAddress\": \"\",\r\n  \"shippingCity\": \"London\",\r\n  \"paymentType\": \"CASH\",\r\n  \"customerId\": 1,\r\n  \"employeeId\": 1,\r\n  \"orderDetails\": [\r\n    {\r\n      \"orderId\": 1,\r\n      \"productId\": 2,\r\n      \"quantity\": 1,\r\n      \"price\": 250\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/orders",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Orders_POST shippingCity required",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('shippingCity is required');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdDate\": \"2017-04-30T17:00:00.000Z\",\r\n  \"status\": \"WAITING\",\r\n  \"description\": \"string\",\r\n  \"shippingAddress\": \"123 Street, London\",\r\n  \"paymentType\": \"CASH\",\r\n  \"customerId\": 1,\r\n  \"employeeId\": 1,\r\n  \"orderDetails\": [\r\n    {\r\n      \"orderId\": 1,\r\n      \"productId\": 2,\r\n      \"quantity\": 1,\r\n      \"price\": 250\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/orders",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Orders_POST shippingCity length than 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('shippingCity should not be empty');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdDate\": \"2017-04-30T17:00:00.000Z\",\r\n  \"status\": \"WAITING\",\r\n  \"description\": \"string\",\r\n  \"shippingAddress\": \"123 Street, London\",\r\n  \"shippingCity\": \"\",\r\n  \"paymentType\": \"CASH\",\r\n  \"customerId\": 1,\r\n  \"employeeId\": 1,\r\n  \"orderDetails\": [\r\n    {\r\n      \"orderId\": 1,\r\n      \"productId\": 2,\r\n      \"quantity\": 1,\r\n      \"price\": 250\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/orders",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Orders_POST shippingCity length less than 50",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('Shipping city must be less than or equal to 50 characters');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdDate\": \"2017-04-30T17:00:00.000Z\",\r\n  \"status\": \"WAITING\",\r\n  \"description\": \"string\",\r\n  \"shippingAddress\": \"123 Street, London\",\r\n  \"shippingCity\": \"LondonLondonLondonLondonLondonLondonLondonLondonLon\",\r\n  \"paymentType\": \"CASH\",\r\n  \"customerId\": 1,\r\n  \"employeeId\": 1,\r\n  \"orderDetails\": [\r\n    {\r\n      \"orderId\": 1,\r\n      \"productId\": 2,\r\n      \"quantity\": 1,\r\n      \"price\": 250\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/orders",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Orders_POST paymentType required",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 201', function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be an object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"      type: 'object',\r",
													"      properties: {\r",
													"        id: { type: 'number' },\r",
													"        createdDate: {type: 'string'},\r",
													"        shippedDate: {type: ['string','null']},\r",
													"        status: {type: 'string'},\r",
													"        description: { type: ['string', 'null'] },\r",
													"        shippingAddress: {type: 'string'},\r",
													"        shippingCity: {type: 'string'},\r",
													"        paymentType: {type: 'string'},\r",
													"        customerId: {type: ['string','number']},\r",
													"        employeeId: {type: ['string','number']},\r",
													"        customer: {\r",
													"            type: 'object',\r",
													"            properties: {\r",
													"                id: {type: 'number'},\r",
													"                firstName: {type: 'string'},\r",
													"                lastName: {type: 'string'},\r",
													"                phoneNumber: {type: 'string'},\r",
													"                address: {type: 'string'},\r",
													"                email: {type: 'string'},\r",
													"                birthday: {type: ['string','null']},\r",
													"            },\r",
													"            required: ['id','firstName','lastName','phoneNumber','address','email','birthday'],\r",
													"            additionalProperties: false,\r",
													"        },\r",
													"        employee: {\r",
													"            type: 'object',\r",
													"            properties: {\r",
													"                id: {type: 'number'},\r",
													"                firstName: {type: 'string'},\r",
													"                lastName: {type: 'string'},\r",
													"                phoneNumber: {type: 'string'},\r",
													"                address: {type: 'string'},\r",
													"                email: {type: 'string'},\r",
													"                birthday: {type: ['string','null']},\r",
													"            },\r",
													"            required: ['id','firstName','lastName','phoneNumber','address','email','birthday'],\r",
													"            additionalProperties: false,\r",
													"        },\r",
													"        orderDetails : {\r",
													"            type: 'array',\r",
													"            items: {\r",
													"                type: 'object',\r",
													"                properties: {\r",
													"                    quantity: {type: 'number'},\r",
													"                    price: {type: 'number'},\r",
													"                    discount: {type: 'number'},\r",
													"                    product: {\r",
													"                        type: 'object',\r",
													"                        properties: {\r",
													"                            id: { type: \"number\" },\r",
													"                            name: { type: \"string\" },\r",
													"                            price: { type: \"number\" },\r",
													"                            discount: { type: \"number\" },\r",
													"                            stock: { type: \"number\" },\r",
													"                            description: { type: [\"string\",\"null\"] },\r",
													"                            categoryId: { type: \"number\" },\r",
													"                            supplierId: { type: \"number\" },\r",
													"                            category: {\r",
													"                                type: \"object\",\r",
													"                                properties: {\r",
													"                                    id: { type: \"number\" },\r",
													"                                    name: { type: \"string\" },\r",
													"                                    description: { type: [\"string\",\"null\"] }\r",
													"                                },\r",
													"                                required: [\"id\", \"name\", \"description\"]\r",
													"                            },\r",
													"                            supplier: {\r",
													"                                type: \"object\",\r",
													"                                properties: {\r",
													"                                    id: { type: \"number\" },\r",
													"                                    name: { type: \"string\" },\r",
													"                                    phoneNumber: { type: \"string\" },\r",
													"                                    email: { type: [\"string\", \"null\"] },\r",
													"                                    address: { type: \"string\" }\r",
													"                                },\r",
													"                                required: [\"id\", \"name\", \"phoneNumber\", \"address\"],\r",
													"                                additionalProperties: false,\r",
													"                            },\r",
													"                        },\r",
													"                        required: [\"id\", \"name\", \"price\", \"stock\", \"categoryId\", \"supplierId\"],\r",
													"                        additionalProperties: false,\r",
													"                    },\r",
													"                },\r",
													"                required: [\"quantity\", \"price\", \"discount\", \"product\"],\r",
													"                additionalProperties: false,\r",
													"            },\r",
													"        },  \r",
													"      },\r",
													"      required: [\"id\", \"createdDate\", \"status\", \"shippingAddress\", \"shippingCity\", \"paymentType\", \"customerId\", \"employeeId\", \"customer\", \"employee\", \"orderDetails\"],\r",
													"      additionalProperties: false\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdDate\": \"2017-04-30T17:00:00.000Z\",\r\n  \"status\": \"WAITING\",\r\n  \"description\": \"string\",\r\n  \"shippingAddress\": \"123 Street, London\",\r\n  \"shippingCity\": \"London\",\r\n  \"customerId\": 1,\r\n  \"employeeId\": 1,\r\n  \"orderDetails\": [\r\n    {\r\n      \"orderId\": 1,\r\n      \"productId\": 2,\r\n      \"quantity\": 1,\r\n      \"price\": 250\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/orders",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Orders_POST paymentType length greater than 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('Payment type must be CASH or CREDIT CARD','Payment type should not be empty');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdDate\": \"2017-04-30T17:00:00.000Z\",\r\n  \"status\": \"WAITING\",\r\n  \"description\": \"string\",\r\n  \"shippingAddress\": \"123 Street, London\",\r\n  \"shippingCity\": \"London\",\r\n  \"paymentType\": \"\",\r\n  \"customerId\": 1,\r\n  \"employeeId\": 1,\r\n  \"orderDetails\": [\r\n    {\r\n      \"orderId\": 1,\r\n      \"productId\": 2,\r\n      \"quantity\": 1,\r\n      \"price\": 250\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/orders",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Orders_POST paymentType length less than 20",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('Payment type must be CASH or CREDIT CARD','Payment type must be less than or equal to 20 characters');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdDate\": \"2017-04-30T17:00:00.000Z\",\r\n  \"status\": \"WAITING\",\r\n  \"description\": \"string\",\r\n  \"shippingAddress\": \"123 Street, London\",\r\n  \"shippingCity\": \"London\",\r\n  \"paymentType\": \"CASHCASHCASHCASHCASHC\",\r\n  \"customerId\": 1,\r\n  \"employeeId\": 1,\r\n  \"orderDetails\": [\r\n    {\r\n      \"orderId\": 1,\r\n      \"productId\": 2,\r\n      \"quantity\": 1,\r\n      \"price\": 250\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/orders",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Orders_POST customerId required",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('customerId is required');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdDate\": \"2017-04-30T17:00:00.000Z\",\r\n  \"status\": \"WAITING\",\r\n  \"description\": \"string\",\r\n  \"shippingAddress\": \"123 Street, London\",\r\n  \"shippingCity\": \"London\",\r\n  \"paymentType\": \"CASH\",\r\n  \"employeeId\": 1,\r\n  \"orderDetails\": [\r\n    {\r\n      \"orderId\": 1,\r\n      \"productId\": 2,\r\n      \"quantity\": 1,\r\n      \"price\": 250\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/orders",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Orders_POST customerId foreign key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('customerId must be a foreign key');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdDate\": \"2017-04-30T17:00:00.000Z\",\r\n  \"status\": \"WAITING\",\r\n  \"description\": \"string\",\r\n  \"shippingAddress\": \"123 Street, London\",\r\n  \"shippingCity\": \"London\",\r\n  \"paymentType\": \"CASH\",\r\n  \"customerId\": 7,\r\n  \"employeeId\": 1,\r\n  \"orderDetails\": [\r\n    {\r\n      \"orderId\": 1,\r\n      \"productId\": 2,\r\n      \"quantity\": 1,\r\n      \"price\": 250\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/orders",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Orders_POST EmployeeId foreign key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('employeeId must be a foreign key');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdDate\": \"2017-04-30T17:00:00.000Z\",\r\n  \"status\": \"WAITING\",\r\n  \"description\": \"string\",\r\n  \"shippingAddress\": \"123 Street, London\",\r\n  \"shippingCity\": \"London\",\r\n  \"paymentType\": \"CASH\",\r\n  \"customerId\": 8,\r\n  \"employeeId\": 11,\r\n  \"orderDetails\": [\r\n    {\r\n      \"orderId\": 1,\r\n      \"productId\": 2,\r\n      \"quantity\": 1,\r\n      \"price\": 250\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/orders",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Orders_POST EmployeeId required",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('employeeId is required');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdDate\": \"2017-04-30T17:00:00.000Z\",\r\n  \"status\": \"WAITING\",\r\n  \"description\": \"string\",\r\n  \"shippingAddress\": \"123 Street, London\",\r\n  \"shippingCity\": \"London\",\r\n  \"paymentType\": \"CASH\",\r\n  \"customerId\": 8,\r\n  \"orderDetails\": [\r\n    {\r\n      \"orderId\": 1,\r\n      \"productId\": 2,\r\n      \"quantity\": 1,\r\n      \"price\": 250\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/orders",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Orders_POST productId required",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('productId is required');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdDate\": \"2017-04-30T17:00:00.000Z\",\r\n  \"status\": \"WAITING\",\r\n  \"description\": \"string\",\r\n  \"shippingAddress\": \"123 Street, London\",\r\n  \"shippingCity\": \"London\",\r\n  \"paymentType\": \"CASH\",\r\n  \"customerId\": 8,\r\n  \"employeeId\": 1,\r\n  \"orderDetails\": [\r\n    {\r\n      \"quantity\": 1,\r\n      \"price\": 250\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/orders",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Orders_POST productId foreign",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('productId must be a foreign key');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdDate\": \"2017-04-30T17:00:00.000Z\",\r\n  \"status\": \"WAITING\",\r\n  \"description\": \"string\",\r\n  \"shippingAddress\": \"123 Street, London\",\r\n  \"shippingCity\": \"London\",\r\n  \"paymentType\": \"CASH\",\r\n  \"customerId\": 8,\r\n  \"employeeId\": 1,\r\n  \"orderDetails\": [\r\n    {\r\n      \"productId\": 1,\r\n      \"quantity\": 1,\r\n      \"price\": 250\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/orders",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Orders_POST larger quantity in stock",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('quantity cannot be greater than the quantity of product in stock');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdDate\": \"2017-04-30T17:00:00.000Z\",\r\n  \"status\": \"WAITING\",\r\n  \"description\": \"string\",\r\n  \"shippingAddress\": \"123 Street, London\",\r\n  \"shippingCity\": \"London\",\r\n  \"paymentType\": \"CASH\",\r\n  \"customerId\": 8,\r\n  \"employeeId\": 1,\r\n  \"orderDetails\": [\r\n    {\r\n      \"productId\": 3,\r\n      \"quantity\": 300,\r\n      \"price\": 7500\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/orders",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Orders_POST quantity is negative",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('quantity must be greater than 0');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdDate\": \"2017-04-30T17:00:00.000Z\",\r\n  \"status\": \"WAITING\",\r\n  \"description\": \"string\",\r\n  \"shippingAddress\": \"123 Street, London\",\r\n  \"shippingCity\": \"London\",\r\n  \"paymentType\": \"CASH\",\r\n  \"customerId\": 8,\r\n  \"employeeId\": 1,\r\n  \"orderDetails\": [\r\n    {\r\n      \"productId\": 3,\r\n      \"quantity\": -1,\r\n      \"price\": 7500\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/orders",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"orders"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PATCH",
							"item": [
								{
									"name": "TC_Orders_PATCH BY ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 200', function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"      type: 'object',\r",
													"      properties: {\r",
													"        id: { type: 'number' },\r",
													"        createdDate: {type: 'string'},\r",
													"        shippedDate: {type: ['string','null']},\r",
													"        status: {type: 'string'},\r",
													"        description: { type: ['string', 'null'] },\r",
													"        shippingAddress: {type: 'string'},\r",
													"        shippingCity: {type: 'string'},\r",
													"        paymentType: {type: 'string'},\r",
													"        customerId: {type: ['string','number']},\r",
													"        employeeId: {type: ['string','number']},\r",
													"        customer: {\r",
													"            type: 'object',\r",
													"            properties: {\r",
													"                id: {type: 'number'},\r",
													"                firstName: {type: 'string'},\r",
													"                lastName: {type: 'string'},\r",
													"                phoneNumber: {type: 'string'},\r",
													"                address: {type: 'string'},\r",
													"                email: {type: 'string'},\r",
													"                birthday: {type: ['string','null']},\r",
													"            },\r",
													"            required: ['id','firstName','lastName','phoneNumber','address','email','birthday'],\r",
													"            additionalProperties: false,\r",
													"        },\r",
													"        employee: {\r",
													"            type: 'object',\r",
													"            properties: {\r",
													"                id: {type: 'number'},\r",
													"                firstName: {type: 'string'},\r",
													"                lastName: {type: 'string'},\r",
													"                phoneNumber: {type: 'string'},\r",
													"                address: {type: 'string'},\r",
													"                email: {type: 'string'},\r",
													"                birthday: {type: ['string','null']},\r",
													"            },\r",
													"            required: ['id','firstName','lastName','phoneNumber','address','email','birthday'],\r",
													"            additionalProperties: false,\r",
													"        },\r",
													"        orderDetails : {\r",
													"            type: 'array',\r",
													"            items: {\r",
													"                type: 'object',\r",
													"                properties: {\r",
													"                    quantity: {type: 'number'},\r",
													"                    price: {type: 'number'},\r",
													"                    discount: {type: 'number'},\r",
													"                    product: {\r",
													"                        type: 'object',\r",
													"                        properties: {\r",
													"                            id: { type: \"number\" },\r",
													"                            name: { type: \"string\" },\r",
													"                            price: { type: \"number\" },\r",
													"                            discount: { type: \"number\" },\r",
													"                            stock: { type: \"number\" },\r",
													"                            description: { type: [\"string\",\"null\"] },\r",
													"                            categoryId: { type: \"number\" },\r",
													"                            supplierId: { type: \"number\" },\r",
													"                            category: {\r",
													"                                type: \"object\",\r",
													"                                properties: {\r",
													"                                    id: { type: \"number\" },\r",
													"                                    name: { type: \"string\" },\r",
													"                                    description: { type: [\"string\",\"null\"] }\r",
													"                                },\r",
													"                                required: [\"id\", \"name\", \"description\"]\r",
													"                            },\r",
													"                            supplier: {\r",
													"                                type: \"object\",\r",
													"                                properties: {\r",
													"                                    id: { type: \"number\" },\r",
													"                                    name: { type: \"string\" },\r",
													"                                    phoneNumber: { type: \"string\" },\r",
													"                                    email: { type: [\"string\", \"null\"] },\r",
													"                                    address: { type: \"string\" }\r",
													"                                },\r",
													"                                required: [\"id\", \"name\", \"phoneNumber\", \"address\"],\r",
													"                                additionalProperties: false,\r",
													"                            },\r",
													"                        },\r",
													"                        required: [\"id\", \"name\", \"price\", \"stock\", \"categoryId\", \"supplierId\"],\r",
													"                        additionalProperties: false,\r",
													"                    },\r",
													"                },\r",
													"                required: [\"quantity\", \"price\", \"discount\", \"product\"],\r",
													"                additionalProperties: false,\r",
													"            },\r",
													"        },  \r",
													"      },\r",
													"      required: [\"id\", \"createdDate\", \"status\", \"shippingAddress\", \"shippingCity\", \"paymentType\", \"customerId\", \"employeeId\", \"customer\", \"employee\", \"orderDetails\"],\r",
													"      additionalProperties: false\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdDate\": \"2017-04-30T17:00:00.000Z\",\r\n  \"shippingAddress\": \"Hoa Khanh\",\r\n  \"shippingCity\": \"Da Nang\",\r\n  \"orderDetails\": [\r\n    {\r\n      \"orderId\": 1,\r\n      \"productId\": 2,\r\n      \"quantity\": 1,\r\n      \"price\": 250\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/orders/39",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"orders",
												"39"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Orders_PATCH BY ID Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('Validation failed (numeric string is expected)');\r",
													"  pm.expect(json.error).to.equal('Invalid route params');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdDate\": \"2017-04-30T17:00:00.000Z\",\r\n  \"status\": \"WAITING\",\r\n  \"description\": \"string\",\r\n  \"shippingAddress\": \"Hoa Khanh\",\r\n  \"shippingCity\": \"Da Nang\",\r\n  \"paymentType\": \"CASH\",\r\n  \"customerId\": 8,\r\n  \"employeeId\": 1,\r\n  \"orderDetails\": [\r\n    {\r\n      \"orderId\": 1,\r\n      \"productId\": 2,\r\n      \"quantity\": 1,\r\n      \"price\": 250\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/orders/1abc",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"orders",
												"1abc"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Orders_PATCH BY ID not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 410', function () {\r",
													"  pm.response.to.have.status(410);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.eql(410);\r",
													"  pm.expect(json.message).to.include('Order not found');\r",
													"  pm.expect(json.error).to.eql('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdDate\": \"2017-04-30T17:00:00.000Z\",\r\n  \"status\": \"WAITING\",\r\n  \"description\": \"string\",\r\n  \"shippingAddress\": \"Hoa Khanh\",\r\n  \"shippingCity\": \"Da Nang\",\r\n  \"paymentType\": \"CASH\",\r\n  \"customerId\": 8,\r\n  \"employeeId\": 1,\r\n  \"orderDetails\": [\r\n    {\r\n      \"orderId\": 1,\r\n      \"productId\": 2,\r\n      \"quantity\": 1,\r\n      \"price\": 250\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/orders/12345",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"orders",
												"12345"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Orders_PATCH status value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.eql(400);\r",
													"  pm.expect(json.message).to.include('Status must be WAITING, COMPLETED or CANCELED');\r",
													"  pm.expect(json.error).to.eql('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdDate\": \"2017-04-30T17:00:00.000Z\",\r\n  \"status\": \"WAITINGGG\",\r\n  \"description\": \"string\",\r\n  \"shippingAddress\": \"Hoa Khanh\",\r\n  \"shippingCity\": \"Da Nang\",\r\n  \"paymentType\": \"CASH\",\r\n  \"customerId\": 8,\r\n  \"employeeId\": 1,\r\n  \"orderDetails\": [\r\n    {\r\n      \"orderId\": 1,\r\n      \"productId\": 2,\r\n      \"quantity\": 1,\r\n      \"price\": 250\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/orders/8",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"orders",
												"8"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Orders_PATCH paymentType value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.eql(400);\r",
													"  pm.expect(json.message).to.include('Payment type must be CASH or CREDIT CARD');\r",
													"  pm.expect(json.error).to.eql('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdDate\": \"2017-04-30T17:00:00.000Z\",\r\n  \"status\": \"WAITING\",\r\n  \"description\": \"string\",\r\n  \"shippingAddress\": \"Hoa Khanh\",\r\n  \"shippingCity\": \"Da Nang\",\r\n  \"paymentType\": \"CASHHH\",\r\n  \"customerId\": 8,\r\n  \"employeeId\": 1,\r\n  \"orderDetails\": [\r\n    {\r\n      \"orderId\": 1,\r\n      \"productId\": 2,\r\n      \"quantity\": 1,\r\n      \"price\": 250\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://server.aptech.io/online-shop/orders/8",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"orders",
												"8"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "DELETE",
							"item": [
								{
									"name": "TC_Orders_DELETE BY ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var json = pm.response.json();\r",
													"  pm.expect(json.statusCode).to.equal(400);\r",
													"  pm.expect(json.message).to.include('Cannot delete order with orderDetail');\r",
													"  pm.expect(json.error).to.equal('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://server.aptech.io/online-shop/orders/35",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"orders",
												"35"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Orders_DELETE BY ID Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 400', function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],\r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.statusCode).to.eql(400);\r",
													"  pm.expect(jsonData.message).to.include('Validation failed (numeric string is expected)');\r",
													"  pm.expect(jsonData.error).to.eql('Invalid route params');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://server.aptech.io/online-shop/orders/1abc",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"orders",
												"1abc"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_Orders_DELETE BY ID not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 410', function () {\r",
													"  pm.response.to.have.status(410);\r",
													"});\r",
													"\r",
													"pm.test('2. Response time is less than 200ms', function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test('3. Response must be valid and have a body', function () {\r",
													"  pm.response.to.be.withBody;\r",
													"  pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test('4. Json must be a object', () => {\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test('5. Schema is valid', () => {\r",
													"  var schema = {\r",
													"    type: 'object',\r",
													"    properties: {\r",
													"      statusCode: { type: 'number' },\r",
													"      message: { type: 'array', items: { type: 'string' } },\r",
													"      error: { type: 'string' },\r",
													"    },\r",
													"    required: ['statusCode', 'message', 'error'],  \r",
													"    additionalProperties: false,\r",
													"  };\r",
													"\r",
													"  const responseJson = pm.response.json();\r",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test('6. Values is correct', function () {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.statusCode).to.eql(410);\r",
													"  pm.expect(jsonData.message).to.include('Order not found');\r",
													"  pm.expect(jsonData.error).to.eql('Bad Request');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://server.aptech.io/online-shop/orders/11",
											"protocol": "https",
											"host": [
												"server",
												"aptech",
												"io"
											],
											"path": [
												"online-shop",
												"orders",
												"11"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMyNTI0NjI0LCJleHAiOjE3NjQwODIyMjR9.Mjm-JQTUMiT1Y5uG2uGQKyI_Rg_8PW6o4LHsmVJMqo0",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "Url",
			"value": "https://server.aptech.io/online-shop",
			"type": "string"
		}
	]
}